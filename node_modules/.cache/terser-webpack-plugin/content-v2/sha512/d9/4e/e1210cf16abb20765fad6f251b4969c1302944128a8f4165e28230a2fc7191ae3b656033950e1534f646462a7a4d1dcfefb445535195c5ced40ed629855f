{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{409:function(v,_,a){\"use strict\";a.r(_);var l=a(14),t=Object(l.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"分布式事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务\"}},[v._v(\"#\")]),v._v(\" 分布式事务\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"多个服务之间协调处理数据需要保持ACID，这就需要分布式事务\")])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"分布式事务产生场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务产生场景\"}},[v._v(\"#\")]),v._v(\" 分布式事务产生场景\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"微服务架构跨JVM、跨数据库实例\")]),v._v(\" \"),a(\"li\",[v._v(\"单体系统跨数据库实例\")]),v._v(\" \"),a(\"li\",[v._v(\"多服务访问同一数据库实例\")])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"cap\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cap\"}},[v._v(\"#\")]),v._v(\" CAP\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[v._v(\"CAP是一致性Consistency、可用性Availability、分区容错性Partition tolerance缩写\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"一致性\"),a(\"code\",[v._v(\"Consistency\")]),v._v(\"：\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"一致性是指写操作以后的读操作可以读取最新的数据。（主从结构的，从读的跟主一致）\")]),v._v(\" \"),a(\"li\",[v._v(\"如何实现：写入主，在同步从的期间，锁定从数据库，待同步完成解锁\")]),v._v(\" \"),a(\"li\",[v._v(\"一致性特点：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"1.由于同步的过程，写操作有一定延迟\")]),v._v(\" \"),a(\"li\",[v._v(\"2.为了保持数据一致会对资源暂时锁定\")]),v._v(\" \"),a(\"li\",[v._v(\"3.请求同步失败节点会返回错误信息，而不是旧数据\")])])])])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"可用性\"),a(\"code\",[v._v(\"Availability\")]),v._v(\":\")])])]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"可用性指任何事务操作都会响应结果，且不会出现响应超时或响应错误\")]),v._v(\" \"),a(\"li\",[v._v(\"如何实现：保证可用则同步过程不能锁定资源;即使没同步成功也会响应旧数据\")]),v._v(\" \"),a(\"li\",[v._v(\"可用性特点：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"所有请求都有响应，且不会响应超时或错误\")])])])]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"分区容错性\"),a(\"code\",[v._v(\"Partition tolerance\")]),v._v(\":\\n\"),a(\"ul\",[a(\"li\",[v._v(\"通常分布式系统各节点部署在不同子网，不可避免出现网络问题导致节点间通信失败，此时仍可对外提供服务，叫分区容错性\")]),v._v(\" \"),a(\"li\",[v._v(\"目标：主数据向从同步数据失败不影响读写操作；其中一个节点挂掉不影响另一个对外提供服务\")]),v._v(\" \"),a(\"li\",[v._v(\"如何实现：尽量异步取代同步;添加多节点，一个挂掉还有其它提供服务\")]),v._v(\" \"),a(\"li\",[v._v(\"分区容错性特点：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"分区容错是分布式系统具备的基本能力\")])])])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"cap组合方式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cap组合方式\"}},[v._v(\"#\")]),v._v(\" CAP组合方式\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"所有分布式事务场景不会同时具备CAP三个特性，在必须满足P的前提下A和C不能共存\")]),v._v(\" \"),a(\"li\",[v._v(\"AP：放弃一致性，追求分区容错性和可用性，是很多分布式系统设计的选择\\n\"),a(\"ul\",[a(\"li\",[v._v(\"通常AP都会保证最终一致性，一些业务场景比如订单退款，今天申请明天到帐\")])])]),v._v(\" \"),a(\"li\",[v._v(\"CP：放弃可用性，追求分区容错性和一致性，zk就是追求强一致\\n\"),a(\"ul\",[a(\"li\",[v._v(\"跨行转账，一次请求要等待双方银行系统都完成整个事务才算完成\")])])]),v._v(\" \"),a(\"li\",[v._v(\"CA:：放弃分区容忍性，即不进行分区，不考虑网络不通或节点挂掉情况，最常用的关系型数据库就是满足CA\")]),v._v(\" \"),a(\"li\",[v._v(\"总结：一个分布式系统最多只能满足CP或AP，对于大多数互联网应用场景，节点众多，部署分散，节点故障不可避免，而且要满足服务高可用（99.99...%),并要达到良好的响应性能，一般都会保证AP，舍弃C，保证最终一致性\")])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"base理论\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#base理论\"}},[v._v(\"#\")]),v._v(\" BASE理论\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"强一致性和最终一致性：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"CAP理论告诉我们一个分布式系统最多满足两项，而AP实际应用中较多，但实际生产中很多场景都需要实现一致性。CAP理论的C要求任何时间查询每个节点数据都必须一致（强一致性），而最终一致性是指允许一段时间内每个节点数据不一致，但最终保证数据一致性\")])])]),v._v(\" \"),a(\"li\",[v._v(\"Base理论：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"BASE是Basically Avilable(基本可用)、Soft state(软状态)和 Eventually consistent(最终一致性)的缩写，BASE理论是对CAP理论中AP的扩展，通过牺牲强一致性获得可用性，允许数据一段时间内不一致，最终达到一致状态。满足BASE理论的事务，我们称为\"),a(\"strong\",[v._v(\"柔性事务\")])])]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"基本可用：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用\")]),v._v(\" \"),a(\"li\",[v._v('软状态：由于不要求强一致性，所以BASE允许系统存在中间状态（也叫软状态），这个状态不影响系统可用性 。如订单状态\"支付中\"')]),v._v(\" \"),a(\"li\",[v._v(\"最终一致：经过一段时间后，所有节点数据最终达到一致，但需要一定时间延迟\")])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"分布式解决方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式解决方案\"}},[v._v(\"#\")]),v._v(\" 分布式解决方案\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"2pc\")]),v._v(\" \"),a(\"li\",[v._v(\"tcc\")]),v._v(\" \"),a(\"li\",[v._v(\"可靠消息最终一致性\")]),v._v(\" \"),a(\"li\",[v._v(\"最大努力通知\")])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"_1-分布式事务解决方案之2pc-两阶段提交\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-分布式事务解决方案之2pc-两阶段提交\"}},[v._v(\"#\")]),v._v(\" 1.分布式事务解决方案之2PC（两阶段提交）\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"2PC,是将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase）\")]),v._v(\" \"),a(\"li\",[v._v(\"准备阶段：事务管理器(TM)给每个参与者发送Prepare消息，每个事务参与者(RM)在本地执行事务，并写本地Undo/Redo日志，此时事务未提交\")]),v._v(\" \"),a(\"li\",[v._v(\"提交阶段：如果事务管理器收到参与者执行失败或超时信息时，直接给参与者发送rollback指令；否则发送commit指令。参与者根据指令执行操作，最后阶段释放事务处理过程中的锁资源\")])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"xa方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#xa方案\"}},[v._v(\"#\")]),v._v(\" XA方案\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"2pc传统方案是数据库层面的实现，如Oracle|MySQL都支持2pc协议，为了统一行业标准，定义了分布式事务处理模型DTP\")]),v._v(\" \"),a(\"li\",[v._v(\"DTP模型角色：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"AP\"),a(\"code\",[v._v(\"application program\")]),v._v(\"：应用程序，可以理解为使用DTP分布式事务的程序\")]),v._v(\" \"),a(\"li\",[v._v(\"RM\"),a(\"code\",[v._v(\"resource manage\")]),v._v(\"：资源管理器，数据库实例，控制分支事务的角色\")]),v._v(\" \"),a(\"li\",[v._v(\"TM\"),a(\"code\",[v._v(\"transcation manage\")]),v._v(\":事务管理器,负责协调和管理事务，事务管理器控制着全局事务，并协调各RM\")]),v._v(\" \"),a(\"li\",[v._v(\"DTP模型定义了TM和RM之间的接口通讯规范叫XA。简单理解就是数据库提供2pc接口协议，\"),a(\"strong\",[v._v(\"基于数据库的XA协议来实现2pc又称为XA方案\")])])])]),v._v(\" \"),a(\"li\",[v._v(\"XA方案问题\\n\"),a(\"ul\",[a(\"li\",[v._v(\"需要本地数据库支持XA协议\")]),v._v(\" \"),a(\"li\",[v._v(\"资源锁定需要等待两个阶段执行完才放锁，性能较差\")])])])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"seata方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#seata方案\"}},[v._v(\"#\")]),v._v(\" seata方案\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"seata是阿里开源的分布式事务框架，传统2pc的问题在seata中得到了解决。它通过对本地关系型数据库分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。性能好，不长时间占用连接资源。它提供的AT模式（即2PC）及TCC模式的分布式解决方案。\")]),v._v(\" \"),a(\"li\",[v._v(\"seata设计思想：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"seata把分布式事务理解成一个包含了若干\"),a(\"strong\",[v._v(\"分支事务\")]),v._v(\"的\"),a(\"strong\",[v._v(\"全局事务\")]),v._v(\"，全局事务的职责是协调其下分支事务达成一致，要么全成功，要么全失败。\")])])]),v._v(\" \"),a(\"li\",[v._v(\"seata三个组件：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"TC\"),a(\"code\",[v._v(\"transcation coordinator\")]),v._v(\"：事务协调器，它是独立中间件，独立部署维护全局事务运行状态，接收TM指令发起全局事务提交和回滚，负责和RM通信协调个分支的提交与回滚\")]),v._v(\" \"),a(\"li\",[v._v(\"TM\"),a(\"code\",[v._v(\"transcation manage\")]),v._v(\"：事务管理器，需要嵌入程序中，它负责开启一个全局事务，并最终向TC发起全局提交或全局回滚\")]),v._v(\" \"),a(\"li\",[v._v(\"RM\"),a(\"code\",[v._v(\"resource manage\")]),v._v(\"：控制分支事务，负责分支事务注册，状态汇报，并接收TC指令，驱动分支（本地）事务提交和回滚\")])])]),v._v(\" \"),a(\"li\",[v._v(\"执行流程\\n\"),a(\"ul\",[a(\"li\",[v._v(\"用户服务的TM向TC申请开启一个全局事务，创建成功TC生成一个全局唯一XID\")]),v._v(\" \"),a(\"li\",[v._v(\"用户服务的RM向TC注册分支事务，执行用户逻辑（插入数据），并将其纳入XID全局事务管辖\")]),v._v(\" \"),a(\"li\",[v._v(\"逻辑执行到远程调用积分服务时（XID在调用链路上下文传播），积分服务的RM向TC注册分支事务，并执行积分逻辑（操作数据），执行完毕后返回用户服务\")]),v._v(\" \"),a(\"li\",[v._v(\"TM向TC发起针对XID的全局提交或回滚\")]),v._v(\" \"),a(\"li\",[v._v(\"TC调度XID下辖的全部分支事务完成提交或回滚提交（回滚反响操作，删掉数据，不需要锁定资源）\\n\"),a(\"img\",{attrs:{src:v.$withBase(\"/transcation/1.png\"),alt:\"dock\"}})])])]),v._v(\" \"),a(\"li\",[v._v(\"seate实现2pc与传统2pc差别：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"架构层面，传统2pc的RM实际是数据库层，通过XA实现；  而seata的RM是jar包形式作为中间件部署在应用程序这一侧\")]),v._v(\" \"),a(\"li\",[v._v(\"两阶段提交层面，传统2pc无论第二阶段是rollback还是commit,事务资源锁都要保持到phase2才释放；seata做法是phase1就将本地事务提交，这样提高整体效率\")])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"_2-分布式事务解决方案之tcc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-分布式事务解决方案之tcc\"}},[v._v(\"#\")]),v._v(\" 2.分布式事务解决方案之TCC\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"TCC是Try、Confirm、Cancle三个词语的缩写，TCC要求每个分支事务实现三个操作：预处理try、确认confirm、撤销cancel。try操作做业务检查和资源预留；confirm做业务确认操作；cancel实现一个和try相反的回滚操作。\")]),v._v(\" \"),a(\"li\",[v._v(\"TM首先发起所有分支事务的try操作，任何一个分支事务try操作失败，TM则进行cancel操作，若try全部成功，TM则发起confirm操作。confirm/cancel若执行失败，则会重试\")])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"tcc的三个阶段\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcc的三个阶段\"}},[v._v(\"#\")]),v._v(\" TCC的三个阶段\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"Try阶段是做业务检查（一致性）及资源预留（隔离），此阶段和后续的Confirm一起才构成真正完整的业务逻辑\")]),v._v(\" \"),a(\"li\",[v._v(\"Confirm阶段做确认提交，Try阶段所有分支事务执行成功后执行Confirm。通常情况下，采用TCC默认Confirm阶段是不会失败的，若真的失败，需引入人工介入以及重试机制\")]),v._v(\" \"),a(\"li\",[v._v(\"Cancel阶段在业务执行错误需要回滚状态下执行分支事务的业务取消，预留资源释放。通常情况下，TCC默认的Cancle也是一定成功的。若失败，需引入人工介入以及重试机制\")]),v._v(\" \"),a(\"li\",[v._v(\"TM事务管理器：TM事务管理器可以实现为独立的服务，也可以让\"),a(\"strong\",[v._v(\"全局事务发起方\")]),v._v(\"充当TM角色，TM独立出来是为了充当公共组件复用。\")])]),v._v(\" \"),a(\"p\",[v._v(\"TM在发起全局事务同时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条，用来记录事务上下文，追踪和记录状态，由于Confirm和Cancel失败需重试，因此需要实现幂等性。\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"_3-分布式事务解决方案之可靠消息最终一致性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-分布式事务解决方案之可靠消息最终一致性\"}},[v._v(\"#\")]),v._v(\" 3.分布式事务解决方案之可靠消息最终一致性\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"可靠消息最终一致性方案是指当事务发起方执行完本地事务后并发出一条消息，事务参与方（消息消费者）一定能够接收消息并处理事务成功，此方案强调的是只要消费发给事务参与方，最终要达到一致\")]),v._v(\" \"),a(\"li\",[v._v(\"此方案是消息中间件完成：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"事务发起方（消息生产者）将消息发给消息中间件，事务参与方从消息中间件接收消息，事务发起方和消息中间件之间、事务参与方与消息中间件之间都是通过网络通信\")])])]),v._v(\" \"),a(\"li\",[v._v(\"可靠消息最终一致性需要解决几个问题：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"本地事务与消息发送的原子性问题（）\")]),v._v(\" \"),a(\"li\",[v._v(\"事务参与方接收消息可靠性  （ack）\")]),v._v(\" \"),a(\"li\",[v._v(\"消息重复消费问题（幂等）\")])])])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"可靠消息最终一致性-本地消息表方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可靠消息最终一致性-本地消息表方案\"}},[v._v(\"#\")]),v._v(\" 可靠消息最终一致性——本地消息表方案\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"此方案的核心是通过本地事务保证数据业务操作和消息的一致性，然后通过定时任务将消费发送至消息中间件，待确认消息发送给消费方后再将消息删除\")]),v._v(\" \"),a(\"li\",[v._v(\"方案：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"事务发起方新增消息日志表，操作本地事务并增加日志。定时任务触发日志到MQ，让下游事务参与方完成事务\")])])])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"可靠消息最终一致性-rocketmq事务消息方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可靠消息最终一致性-rocketmq事务消息方案\"}},[v._v(\"#\")]),v._v(\" 可靠消息最终一致性——RocketMQ事务消息方案\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"方案：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"MQ发起方会向MQ Server发送消息，MQ Server接收消息会向MQ发起方回应成功\")]),v._v(\" \"),a(\"li\",[v._v(\"MQ发起方收到回应，会向MQ Server发送Commit 或者Rollback指令\")]),v._v(\" \"),a(\"li\",[v._v(\"MQ Server接收到指令了会执行对应Commit或者Rollback操作，选择是否让MQ订阅方消费\")])])]),v._v(\" \"),a(\"li\",[v._v(\"注意点：\\n\"),a(\"ul\",[a(\"li\",[v._v(\"为了防止网络问题导致发起方和MQ Server发送 Commit 或者Rollback指令断掉，会有个\"),a(\"strong\",[v._v(\"回查事务\")]),v._v(\"，需要事务发起方实现一个\"),a(\"code\",[v._v(\"RocketMQLocalTranscationListener\")]),v._v(\"接口\")])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"_4-分布式事务解决方案之最大努力通知\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-分布式事务解决方案之最大努力通知\"}},[v._v(\"#\")]),v._v(\" 4.分布式事务解决方案之最大努力通知\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"最大努力通知方案目标：发起通知方通过一定机制最大努力将业务处理结果通知给接收方\\n\"),a(\"ul\",[a(\"li\",[v._v(\"一定的重复通知机制\")]),v._v(\" \"),a(\"li\",[v._v(\"提供接口给接收方主动查询\")])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"最大努力通知与可靠消息一致性区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最大努力通知与可靠消息一致性区别\"}},[v._v(\"#\")]),v._v(\" 最大努力通知与可靠消息一致性区别\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"方案思想不同\\n\"),a(\"ul\",[a(\"li\",[v._v(\"最大努力通知：发起通知方尽最大努力将业务处理结果通知接收通知方，并提供接口供接收通知方查询，通知可靠性在于接收方保证\")]),v._v(\" \"),a(\"li\",[v._v(\"可靠消息一致性：消息通知方需保证消息发出去并通知接收方，消息可靠性又发起方保证\")])])]),v._v(\" \"),a(\"li\",[v._v(\"业务场景不同\\n\"),a(\"ul\",[a(\"li\",[v._v(\"最大努力通知：关注的是交易后的通知事务，即将交易可靠的通知出去\")]),v._v(\" \"),a(\"li\",[v._v(\"可靠消息一致性：关注的是交易过程事务一致性，以异步方式完成交易\")])])]),v._v(\" \"),a(\"li\",[v._v(\"技术解决方案不同\\n\"),a(\"ul\",[a(\"li\",[v._v(\"最大努力通知：无法保证消息发出去到接收的一致性，只提供消息接收的可靠性机制\")]),v._v(\" \"),a(\"li\",[v._v(\"可靠消息一致性：解决的是消息发出到接收的一致性，即发出消息并被接收\")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);","extractedComments":[]}