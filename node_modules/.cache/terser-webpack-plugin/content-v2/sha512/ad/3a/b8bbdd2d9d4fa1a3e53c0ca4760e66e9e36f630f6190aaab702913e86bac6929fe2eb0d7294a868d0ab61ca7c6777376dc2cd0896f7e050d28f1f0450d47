{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{341:function(t,a,s){\"use strict\";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h2\",{attrs:{id:\"elacticsearch进阶\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#elacticsearch进阶\"}},[t._v(\"#\")]),t._v(\" ElacticSearch进阶\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"集群部署\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群部署\"}},[t._v(\"#\")]),t._v(\" 集群部署\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"集群提供可扩展的容量，且高可用，并发处理高，生产环境应用运行在集群中\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"windows集群\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#windows集群\"}},[t._v(\"#\")]),t._v(\" Windows集群\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"linux集群\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux集群\"}},[t._v(\"#\")]),t._v(\" Linux集群\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"es核心\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es核心\"}},[t._v(\"#\")]),t._v(\" ES核心\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"接近实时-nrt\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#接近实时-nrt\"}},[t._v(\"#\")]),t._v(\" 接近实时 NRT\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"ES是一个接近实时的搜索平台，这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（1s以内）\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"集群-cluster\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群-cluster\"}},[t._v(\"#\")]),t._v(\" 集群 cluster\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"一个集群就是由一个或者多个节点组织一起的，它们共同持有整个数据，并提供索引和搜索功能。一个集群由一个唯一的名字来标识，这个名字默认‘elactisearch’,这个名字是重要的，因为节点的加入必须指定某个集群的名字。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"节点-node\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#节点-node\"}},[t._v(\"#\")]),t._v(\" 节点 node\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"集群包含多个节点，它参与集群的索引和搜索功能\")]),t._v(\" \"),s(\"li\",[t._v(\"节点也是有名称的，默认情况下是一个随机的漫威角色名，这个名字会在节点启动时赋予。节点名称对于管理也是重要的，在管理过程中，需要确定网络中哪些服务器对于集群中的哪些节点。\")]),t._v(\" \"),s(\"li\",[t._v(\"一个节点可以通过配置集群名称加入集群，如果你启动了若干节点，并假定它们彼此互相发现，那么它们就自动的形成并加入集群中。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"分片-shards\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分片-shards\"}},[t._v(\"#\")]),t._v(\" 分片 shards\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"分片：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"分片就是，有一个大的索引，单节点没有这么大容量或者放单节点上处理搜索很慢，为了解决这个问题，es设置分片，允许一个索引放置在多个节点上。\")]),t._v(\" \"),s(\"li\",[t._v(\"分片很重要，主要的原因有两个：1）允许你水平分割/拓展你的内容容量 2）允许你分片(潜在地位于多个节点上)之上进行分布式，并行的操作，提高吞吐量\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"副本-replicas\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#副本-replicas\"}},[t._v(\"#\")]),t._v(\" 副本 replicas\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"在一个网络、云环境中，失败随时可能发生，在某个分片/节点挂掉时，有一个故障转移机制是非常有用的\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"某个节点挂了，有一个故障转移很重要。为此目的，ES允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者复制\")]),t._v(\" \"),s(\"li\",[t._v(\"复制很重要，主要的原因有两个：1）在节点失败的情况下，提供了高可用 2）拓展搜索量/吞吐量\")]),t._v(\" \"),s(\"li\",[t._v(\"复制不与原分片/主要分片置于同一节点是重要的\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"分配-allocation\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分配-allocation\"}},[t._v(\"#\")]),t._v(\" 分配 allocation\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由master节点完成的\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"系统架构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#系统架构\"}},[t._v(\"#\")]),t._v(\" 系统架构\")]),t._v(\" \"),s(\"img\",{attrs:{src:t.$withBase(\"/es/es.png\"),alt:\"dock\"}}),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 假设我们设置一个users的索引,设置三个分片，每个分片对应一个副本\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XPUT\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/users/_settings\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n  \"settings\":{\\n    \"number_of_shards:\": 3,\\n    \"number_of_replicas\": 1\\n  }\\n}\\n\\'')]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"故障转移\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#故障转移\"}},[t._v(\"#\")]),t._v(\" 故障转移\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"当集群只有一个节点时，意味着会有单点故障问题。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"当你在同一台集群启动另一个节点，只要第二个节点具有相同的cluster.name,它会自动发现加入。\")]),t._v(\" \"),s(\"li\",[t._v(\"在不同机器上启动节点，为了加入集群，需要配置一个可连接到单播主机列表。之所以配置为使用单播发现，是防止其它节点无意中加入集群\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"水平扩容\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#水平扩容\"}},[t._v(\"#\")]),t._v(\" 水平扩容\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"水平扩容，当启动三个节点，为了分散负载会对分片进行重新分片\\n\"),s(\"ul\",[s(\"li\",[t._v(\"如果是一个或两个节点，三个分片每个节点都会有，当节点为三个，则三个分片会两两分配到三个节点上，保证每个节点上，任意一个分片异常，都有别的节点上副本提供备用\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"custom-block tip\"},[s(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"假设三个分片0、1、2，三个节点A、B、C\\n\"),s(\"ul\",[s(\"li\",[t._v(\"A节点上分片 0、1\")]),t._v(\" \"),s(\"li\",[t._v(\"B节点上分片 0、2\")]),t._v(\" \"),s(\"li\",[t._v(\"C节点上分片 1、2\")])])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"分片是一个功能完整的搜索引擎，它拥有使用的一个节点上所有资源的能力。我们现在拥有6个节点（3主分片，3副本分片）的索引最大可扩展到6个节点，每个节点上一个分片，并且每个分片拥有所在节点的全部资源。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"如果我们想扩容超过6个节点怎么办？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"主分片数目在索引创建时已经确定了（不可变），只有3个。这个定义的数目已经确定了数据存储的最大量（取决数据大小、硬件大小、使用场景）。但是读操作，是可以同时从主分片和副本分片处理。意味着，你可以扩展大的副本节点，使吞吐量变大\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#条件副本分片为2，即三个分片拥有6个副本\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XPUT\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/users/_settings\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'\\n{\\n  \\\"number_of_replicas\\\":2\\n}\\n'\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 这种情况下，极限节点数就是9台，3主+6副本\")]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"应对故障\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应对故障\"}},[t._v(\"#\")]),t._v(\" 应对故障\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"假设从Node挂掉，只会影响分片数，不会影响数据的CRUD。从节点恢复以后，继续加入主节点\")]),t._v(\" \"),s(\"li\",[t._v(\"如果主Node挂掉，其它从Node会选举一个主Node,也不会影响数据的CRUD。挂掉的节点再加入就变成了从Node\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"es的数据写入和读取\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es的数据写入和读取\"}},[t._v(\"#\")]),t._v(\" ES的数据写入和读取\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"写入\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"客户端选择一个 node 发送请求过去，这个 node 就是 \"),s(\"code\",[t._v(\"coordinating node\")]),t._v(\"（协调节点）\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"coordinating node\")]),t._v(\" 对 document 进行\"),s(\"strong\",[t._v(\"路由\")]),t._v(\"，将请求转发给对应的 node（primary shard）。\")]),t._v(\" \"),s(\"li\",[t._v(\"实际的 node 上的 \"),s(\"code\",[t._v(\"primary shard\")]),t._v(\" 处理请求，然后将数据同步到 \"),s(\"code\",[t._v(\"replica node\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"coordinating node\")]),t._v(\" 如果发现 \"),s(\"code\",[t._v(\"primary node\")]),t._v(\" 和所有 \"),s(\"code\",[t._v(\"replica node\")]),t._v(\" 都搞定之后，就返回响应结果给客户端。\")]),t._v(\" \"),s(\"li\",[t._v(\"写入数据，判断写入哪个主分片叫做路由计算 ：hash(id)%主分片数\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"读取\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"可以通过 \"),s(\"code\",[t._v(\"doc id\")]),t._v(\" 来查询，会根据 \"),s(\"code\",[t._v(\"doc id\")]),t._v(\" 进行 hash，判断出来当时把 \"),s(\"code\",[t._v(\"doc id\")]),t._v(\" 分配到了哪个 shard 上面去，从那个 shard 去查询\")]),t._v(\" \"),s(\"li\",[t._v(\"客户端发送请求到\"),s(\"strong\",[t._v(\"任意\")]),t._v(\"一个 node，成为 \"),s(\"code\",[t._v(\"coordinate node\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"coordinate node\")]),t._v(\" 对 \"),s(\"code\",[t._v(\"doc id\")]),t._v(\" 进行哈希路由，将请求转发到对应的 node，此时会使用 \"),s(\"code\",[t._v(\"round-robin\")]),t._v(\" \"),s(\"strong\",[t._v(\"随机轮询算法\")]),t._v(\"，在 \"),s(\"code\",[t._v(\"primary shard\")]),t._v(\" 以及其所有 replica 中随机选择一个，让读请求负载均衡。\")]),t._v(\" \"),s(\"li\",[t._v(\"接收请求的 node 返回 document 给 \"),s(\"code\",[t._v(\"coordinate node\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"coordinate node\")]),t._v(\" 返回 document 给客户端。\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"倒排索引结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#倒排索引结构\"}},[t._v(\"#\")]),t._v(\" 倒排索引结构\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"前面提过，倒排索引就是根据value找key,为此我们举个例子\\n\"),s(\"ul\",[s(\"li\",[t._v(\"假设有个users索引，它有四个字段，分别是name|gender|age|address。画出来大概是个这个样子，以关系型数据库一样\")])])])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"id\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"name\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"gender\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"age\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"address\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"张三\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"22\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"宝鸡市陈仓区\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"2\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"李四\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"21\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"西安市长安区\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"3\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"王五\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"23\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"西安市雁塔区\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"code\",[t._v(\"Term单词\")]),t._v(\"：一段文本经过分析器分析后输出的一串单词，就是一个个的Term\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[t._v(\"Term Dictionary字典\")]),t._v(\"：顾名思义，就是保存Term的字典。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[t._v(\"Posting List倒排列表\")]),t._v(\"：记录出现过某个Term的所有Documents文档列表以及该Term在文档位置,每条记录都称为一个倒排项Posting\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"em\",[t._v(\"实际的Posting List不仅仅保存文档ID这么简单，还保存了其它信息，比如次频、偏移量等\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[t._v(\"Term Index单词索引\")]),t._v(\"：为了更好找到某个单词，我们为Term单词建立索引\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"上面的例子，ES建立的索引大致如下：\")])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"name字段\")])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"Term\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Posting List\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"张三\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"李四\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"王五\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"age字段\")])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"Term\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Posting List\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"21\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"22\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"23\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"gender字段\")])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"Term\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Posting List\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"[1,3]\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"2\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"address字段\")])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"Term\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Posting List\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"宝鸡市\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"西安市\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"[2,3]\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"陈仓区\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"雁塔区\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"长安区\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"ES会为每个字段都建立一个\"),s(\"strong\",[t._v(\"倒排索引\")]),t._v(\"，上面的张三、西安市、22都是Term,而[2，3]就是Posting List，存储了所有符合某个Term的文档ID\")]),t._v(\" \"),s(\"li\",[t._v(\"如何根据关键词找到Term？这就需要给Term建立索引，类似MySQL的B+Tree结构\")]),t._v(\" \"),s(\"li\",[t._v(\"倒排索引中，我们根据Term索引可以找到Term在Term Dictionary的位置，进而找到Posting List,然后找到 Documents的ID\\n\"),s(\"ul\",[s(\"li\",[s(\"em\",[t._v(\"类比MySQL,Term Index可以理解为索引,Term Dictionary理解为数据\")])])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"文档搜索\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文档搜索\"}},[t._v(\"#\")]),t._v(\" 文档搜索\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"早期全文检索会为整个文档Documents建立一个很大的倒排索引并写入磁盘，一旦新的索引就绪，旧的会被替换，这样保证最近的变化可以被检索到\")]),t._v(\" \"),s(\"li\",[t._v(\"倒排索引写入磁盘后是不可改变的，目的如下：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"不需要锁，因为没有写入，就只有读\")]),t._v(\" \"),s(\"li\",[t._v(\"索引被读入内核文件缓存，大部分的请求直接访问缓存，不会命中磁盘\")]),t._v(\" \"),s(\"li\",[t._v(\"其它缓存（filter缓存），在索引生命周期内始终有效，不需要每次数据改变被重建\")]),t._v(\" \"),s(\"li\",[t._v(\"写入单个大的倒排索引允许数据压缩，减少磁盘I/O和需要被缓存到内存的使用量\")])])]),t._v(\" \"),s(\"li\",[t._v(\"当然不变的倒排索引也有缺点，即创建后，如果要修改，就需要重建整个倒排索引，如果更新频率高，则性能有很大影响\")]),t._v(\" \"),s(\"li\",[t._v(\"如何保证不变性前提下实现倒排索引更新？\\n\"),s(\"ul\",[s(\"li\",[t._v(\"答案是：建立更多的倒排索引，即通过创建新的倒排索引来补充修改的内容，而不是直接全部重写。每个倒排索引都会被查询，合并后返回\")])])]),t._v(\" \"),s(\"li\",[t._v(\"逻辑删除：这样的话，一个倒排索引就可能包含多段，既然段不可改变，删除的数据也是不能真正在磁盘中删除的。所以我们会对删除的数据进行标记（逻辑删除）。这个缺点就会导致无效数据量可能累计过大。\")]),t._v(\" \"),s(\"li\",[t._v(\"合并：解决一个倒排索引中多个段无效数据过多的问题，对数据进行整理合并。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"文档刷新-文档刷写-文档合并\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文档刷新-文档刷写-文档合并\"}},[t._v(\"#\")]),t._v(\" 文档刷新&文档刷写&文档合并\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"近实时搜索：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"随着按段（per-segment）搜索的发展，提交Commiting一个新的段到磁盘需要一个\"),s(\"code\",[t._v(\"fsync\")]),t._v(\"来确保数据写入磁盘。保证数据不丢失。但是这个操作代价很大，如果每个索引都执行一次开销很大。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"我们有更轻量化方式使文档可被搜索。即修改的内容先在内存缓存区OS Cache中被写入一个新的段中。然后再被刷新到磁盘。到磁盘这一步代价较高，不过文件以及在缓存区OS Cache中了，就已经可以被读取。保证了近实时。\")]),t._v(\" \"),s(\"li\",[t._v(\"内存中数据写入到OS Cache过程叫refresh，效率很高。进入以后就可以提供给用户查询了，而写入磁盘的flush较慢。flush中包含了文档的合并\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"custom-block tip\"},[s(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"数据写入磁盘，协调节点找到主分片，并发写入副本分片\\n\"),s(\"ul\",[s(\"li\",[t._v(\"延时：主分片的延时+并行写入副本的最大延时\")])])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"文档分析\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文档分析\"}},[t._v(\"#\")]),t._v(\" 文档分析\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"文档分析包含以下过程\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"将一个词条分成合适的倒排索引独立的Term\")]),t._v(\" \"),s(\"li\",[t._v(\"将这些词条统一化成标准格式提高可搜索性\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"以上操作由分析器来操作，分析器实际是将三个操作封装到包里：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"字符过滤器：字符串按顺序通过每个字符过滤器。它们任务是在分词前整理字符串。一个字符过滤器可以用来去掉HTML、或者将&转化成and\")]),t._v(\" \"),s(\"li\",[t._v(\"分词器：字符串会被分词器分为单个的Term,一个简单的分词器遇到空格或者标点时，可能会对文本拆分\")]),t._v(\" \"),s(\"li\",[t._v(\"Token过滤器：词条按顺序通过Token过滤器，这个过程可能会改变词条（例如，Like变小写），删除词条（例如a、the、and无效词条），或者增加词条（例如，jump和leap这种同义词）\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"内置分词器\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"ES提供了一些预装的分词器，主要的如下：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"标准分词器：这是ES的默认分词器。它分析各种语言最常用文本选择，删除绝大部分标点，将词条小写。\")]),t._v(\" \"),s(\"li\",[t._v(\"简单分词器：在任何不是字母的地方进行分隔，词条小写\")]),t._v(\" \"),s(\"li\",[t._v(\"空格分词器：在空格的地方分词\")]),t._v(\" \"),s(\"li\",[t._v(\"语言分析器：特定语言分析器可用于多种语言，它可以考虑语言特点，例如分析英语中无效的a\\\\the\\\\and等\")])])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"分析器使用场景\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"当我们索引一个文档，它的全文域会被分析成Term来创建倒排索引。但当我们用全文域搜索时。需要将查询字符串通过相同的分析过程，以保证我们搜索词条格式和索引中Term一致\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 检测分词器分词效果\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XGET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/_analyze\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n\\t\"analyzer\":\"standard\",\\n\\t\"text\":\"Text to analyze\"\\n}\\n\\'')]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 返回结果中token是实际存储的Term,position记录Term在原始文本的位置，start_offset\\\\end_offset记录偏移量\")]),t._v(\"\\n\")])])]),s(\"ul\",[s(\"li\",[t._v(\"指定分析器IK\\n\"),s(\"ul\",[s(\"li\",[t._v(\"中文分词，采用IK分词器，下载地址 https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v7.8.0\")]),t._v(\" \"),s(\"li\",[t._v(\"解压文件放入ES根目录下plugins目录下，重启ES\")])])]),t._v(\" \"),s(\"li\",[t._v(\"测试效果\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# ik_max_word将文本拆成最细粒度的\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XGET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/_analyze\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n\\t\"analyzer\":\"ik_max_word\",\\n\\t\"text\":\"中国人\"\\n}\\n\\'')]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# ik_max_word中Term会分为`中国人` `中国` `国人`\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#ik_smart 将文本最粗粒度拆分\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XGET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/_analyze\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n\\t\"analyzer\":\"ik_smart\",\\n\\t\"text\":\"中国人\"\\n}\\n\\'')]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#ik_smart中Term只有一个就是`中国人` \")]),t._v(\"\\n\")])])]),s(\"ul\",[s(\"li\",[t._v(\"ES也可以自己对分词进行扩展\\n\"),s(\"ul\",[s(\"li\",[t._v(\"进入ES的plugins目录的ik文件夹，进入config目录，创建custome.dic文件，写入自定义分词\")]),t._v(\" \"),s(\"li\",[t._v(\"打开IKAnalyzer.cfg.xml文件，将新建custom.dic配置其中，然后重启ES\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"?xml \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"version\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"1.0\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"encoding\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"UTF-8\"')]),t._v(\"?\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"DOCTYPE properties SYSTEM \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://java.sun.com/dtd/properties.dtd\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"properties\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"comment\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"IK Analyzer 扩展配置\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/comment\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--用户可以在这里配置自己的扩展字典 --\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"entry \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"key\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ext_dict\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"custom.dic\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/entry\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n     \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--用户可以在这里配置自己的扩展停止词字典--\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"entry \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"key\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ext_stopwords\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/entry\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--用户可以在这里配置远程扩展字典 --\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"-- \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"entry \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"key\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"remote_ext_dict\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"words_location\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/entry\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" --\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--用户可以在这里配置远程扩展停止词字典--\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"-- \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"entry \"),s(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"key\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"remote_ext_stopwords\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"words_location\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/entry\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" --\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"/properties\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"文档控制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文档控制\"}},[t._v(\"#\")]),t._v(\" 文档控制\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"文档冲突：当我们使用index API更新文档，可以一次性读取原始文档，做修改。然后重新索引整个文档。最后的索引请求将被执行。如果同时他人也在更改整个文档，他们的更改会丢失。\")]),t._v(\" \"),s(\"li\",[t._v(\"如果是全量更新，最终执行的是一个人的修改数据。如果是局部更新，可能A成员改了a部分数据，B成员改了b部分数据，这就有问题了。\")]),t._v(\" \"),s(\"li\",[t._v(\"悲观并发控制：这种方式在关系型数据库被广泛使用，简单来说就是操作数据时，对资源加锁\")]),t._v(\" \"),s(\"li\",[t._v(\"乐观并发控制：ES假设这种冲突不太可能发生，并且不会阻塞数据操作。如果源数据读写过程中被修改，更新将会失败，应用程序将决定如何处理失败。例如尝试更新、使用新的数据，或者将问题报告给用户 。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"put文档时，会返回\"),s(\"code\",[t._v(\"_seq_no\")]),t._v(\"和\"),s(\"code\",[t._v(\"_primary_term\")]),t._v(\"字段，用来做乐观锁（老版本用version）\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XPOST\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/shopping/_doc/1001?if_seq_no=0&if_primary_term=1\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n\\t\"name\":\"华为\",\\n\\t\"price\":\"4999\"\\n}\\n\\'')]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#还有一种用version的方式，即你的version需要大于文档的version\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-XPOST\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200/shopping/_doc/1001?version=3&version_type=external\"')]),t._v(\" -d\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\\'\\n{\\n\\t\"name\":\"华为\",\\n\\t\"price\":\"4999\"\\n}\\n\\'')]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"文档展示-kibana\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文档展示-kibana\"}},[t._v(\"#\")]),t._v(\" 文档展示-kibana\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"下载安装kibana\")]),t._v(\" \"),s(\"li\",[t._v(\"修改配置config/kibana.yml文件\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-sh extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#默认端口\")]),t._v(\"\\nserver.port:5601\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#配置ES服务器地址\")]),t._v(\"\\nelasticsearch.hosts:\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"http://localhost:9200\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#索引名\")]),t._v(\"\\nkibana.index:\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\".kibana\"')]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#支持中文\")]),t._v(\"\\ni18n.locale:\"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"zh-CN\"')]),t._v(\"\\n\")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}