{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{422:function(t,s,a){\"use strict\";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"jvm相关问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm相关问题\"}},[t._v(\"#\")]),t._v(\" JVM相关问题\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"jvm垃圾回收时如何确定是垃圾-什么是gc-roots\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm垃圾回收时如何确定是垃圾-什么是gc-roots\"}},[t._v(\"#\")]),t._v(\" JVM垃圾回收时如何确定是垃圾？什么是GC Roots\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"引用计数法，判断是否被引用(解决不了循环引用问题)\")]),t._v(\" \"),a(\"li\",[t._v(\"可达性分析(根搜索路径GC Roots)\\n\"),a(\"ul\",[a(\"li\",[t._v(\"**基本思路就是通过一系列名为GC Roots的对象为起始点。**往下搜索，如果一个对象和GC Roots没有任何引用链相连时，说明对象不可用。\")])])]),t._v(\" \"),a(\"li\",[t._v(\"哪些可以成为GC Roots\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"虚拟机栈java stack\")]),t._v(\"中引用的对象\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"方法区Method Area\")]),t._v(\" 中的类静态属性引用的对象\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"方法区Method Area\")]),t._v(\" 常量引用的对象\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"本地方法栈中（native方法）\")]),t._v(\"引用的对象\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo2\")]),t._v(\" t2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//2.方法区类静态属性引用对象\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo3\")]),t._v(\" t3 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo3\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//3.方法区常量引用的对象\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" byteArrays \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//4.native对象\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"m1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo\")]),t._v(\" t1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GcRootsDemo\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//1.java stack中引用的对象\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"第一次GC完成\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"m1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"如何查看jvm参数默认值-jvm的参数类型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何查看jvm参数默认值-jvm的参数类型\"}},[t._v(\"#\")]),t._v(\" 如何查看JVM参数默认值（JVM的参数类型）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"标配参数\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"-version\")]),t._v(\" \"),a(\"li\",[t._v(\"-help\")]),t._v(\" \"),a(\"li\",[t._v(\"-showversion\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"x参数(了解)\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"-Xint 解释执行\")]),t._v(\" \"),a(\"li\",[t._v(\"-Xcomp 第一次使用就编译成本地代码\")]),t._v(\" \"),a(\"li\",[t._v(\"-Xmixed 混合模式\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"xx参数 \"),a(\"code\",[t._v(\"jps -l 找进程号， jinfo查看配置\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"布尔类型 （公式：-XX:+某属性 -XX:-某属性 +开启 -关闭）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"比如\"),a(\"code\",[t._v(\"jps -l\")]),t._v(\"找到一个类进程号，然后 \"),a(\"code\",[t._v(\"jinfo -flag PrintGCDetails 进程号\")]),t._v(\"，查看是否开启了开始GC收集PrintGCDetails（可以通过 -XX:+PrintGCDetails 设置）。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"jinfo -flag UseSerialGC 进程号\")]),t._v(\"查看是否使用串行GC\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"KV设值类型\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"假设我们看\"),a(\"code\",[t._v(\"元空间MetaSpace\")]),t._v(\"大小，也可以先用布尔参数查询，\"),a(\"code\",[t._v(\"jinfo -flag MetaspaceSize 进程号\")]),t._v(\"获取查看。此时我们设置自己想要的大小\"),a(\"code\",[t._v(\"-XX:MetaspaceSize=128m\")]),t._v(\",再次进行查看\")]),t._v(\" \"),a(\"li\",[t._v(\"同样可以查看设置新生代到老年代的年龄\"),a(\"code\",[t._v(\"MaxTenuringThreshold\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"jinfo -flags 进程号\")]),t._v(\" 可以查询所有的可调整的区域的参数名\")])])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"Non-default VM flags: -XX:CICompilerCount\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4\")]),t._v(\" -XX:InitialHeapSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"266338304\")]),t._v(\" -XX:MaxHeapSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4242538496\")]),t._v(\" -XX:MaxNewSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1414004736\")]),t._v(\" -XX:MinHeapDeltaBytes\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"524\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"288\")]),t._v(\" -XX:NewSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"88604672\")]),t._v(\" -XX:OldSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"177733632\")]),t._v(\" -XX:+PrintGCDetails -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamp\\ns -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC //默认的\\nCommand line:  -XX:+PrintGCDetails //人工配置的\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"-Xms -Xmx\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"-Xms 等价于 InitialHeapSize\")]),t._v(\" \"),a(\"li\",[t._v(\"-Xmx 等价于 MaxHeapSize\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"java -XX:+PrintFlagsInitial\")]),t._v(\"查看JVM初始化参数值\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"java -XX:+PrintFlagsFinal -version\")]),t._v(\" 打印最终值，如果某个默认值被新值覆盖，显示新值（其中有 \"),a(\"code\",[t._v(\":=\")]),t._v(\" 标记的，说明是被用户或者JVM修改过的参数）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"java -XX:+PrintCommandLineFlags -version\")]),t._v(\" 常用的参数配置以及GC的默认垃圾回收器\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"-XX:InitialHeapSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"265147264\")]),t._v(\" -XX:MaxHeapSize\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4242356224\")]),t._v(\" -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLarge\\nPagesIndividualAllocation -XX:+UseParallelGC //默认垃圾回收器\\n\")])])]),a(\"h3\",{attrs:{id:\"常用的jvm参数配置有哪些\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用的jvm参数配置有哪些\"}},[t._v(\"#\")]),t._v(\" 常用的JVM参数配置有哪些\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"-Xms -Xmx\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Xms 默认是物理内存的1/64\")]),t._v(\" \"),a(\"li\",[t._v(\"Xmx 默认是物理内存的1/4\")])])]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"-Xss\")]),t._v(\" 等价 -XX:ThreadStackSize,一般默认 512k~1024k\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"-Xmn\")]),t._v(\" 设置年轻代大小（一般不需要调整） 新生代老年代比例1/3,2/3\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"-XX:MetaspaceSize\")]),t._v(\" 元空间，jdk8以后，这个空间不占用heap的内存，大小取决与机器内存\\n\"),a(\"ul\",[a(\"li\",[t._v(\"虽然是占用物理内存，但是会有默认值，为了避免元空间OOM，可以把这个参数设置大一点（允许的话 512MB ~ 1G范围）\")])])]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"-XX:+PrintGCDetails\")]),t._v(\" 收集GC详细日志输出信息\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"强引用、软引用、弱引用、虚引用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强引用、软引用、弱引用、虚引用\"}},[t._v(\"#\")]),t._v(\" 强引用、软引用、弱引用、虚引用\")]),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/jvm/reference.png\"),alt:\"dock\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"强引用Reference\")]),t._v(\" 默认支持模式\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"当内存不足，JVM开始GC，对于强引用对象，就算是\"),a(\"strong\",[t._v(\"出现了OOM也不会对对象进行回收。\")])]),t._v(\" \"),a(\"li\",[t._v(\"强引用就是我们常见的普通对象引用（Person p = new Person();），只要有强引用指向一个对象，说明对象还活着。一个对象被强引用变量引用时，它处于可达状态，*即使该对象以后永远不会用到，也不会被GC回收。*因此强引用时造成内存泄漏的主要原因之一。\")]),t._v(\" \"),a(\"li\",[t._v(\"一个普通对象，如果它没有其它引用关系，只要超过了引用作用域或者显式的将引用赋值为null。一般认为它是可以被GC的。\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StrongReference\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//定义的默认强引用\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//obj2引用赋值，也指向obj1指向的内存地址\")]),t._v(\"\\n        obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//obj1指向为null\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//不会被垃圾回收\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"软引用SoftReference\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"软引用是相对强引用弱化了点的引用，需要用java.lang.ref.SoftRerence类实现，可以让内存豁免一些垃圾收集。\")]),t._v(\" \"),a(\"li\",[t._v(\"对于只有软引用的对象来说\\n\"),a(\"ul\",[a(\"li\",[t._v(\"当内存充足时，不会被GC\")]),t._v(\" \"),a(\"li\",[t._v(\"当内存不足时，会被GC\")])])]),t._v(\" \"),a(\"li\",[t._v(\"软引用通常用在内存敏感的数据中，比如高速缓存就用软引用。\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReferenceDemo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 内存够用时\\n     */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"memory_enough\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),t._v(\" softReference \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//软引用\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"softReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//失效强引用\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"softReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"==\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//内存够用，不GC\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 内存不够用时\\n     * JVM配置小内存,模拟OOM -Xms5m -Xmx5m -XX:+PrintGCDetails\\n     */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"memory_not_enough\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),t._v(\" softReference \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//软引用\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"softReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        obj1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//让引用失效\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Throwable\")]),t._v(\" e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            e\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"finally\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"soft->\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"softReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//不够用被回收null\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"memory_enough\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"memory_not_enough\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"弱引用WeakReference\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"弱引用需要用java.lang.ref.WeakReference实现，它比软引用生存期短。\")]),t._v(\" \"),a(\"li\",[t._v(\"对于只有弱引用的对象来说，只要垃圾回收机制运行，不管JVM内存空间是否足够，都会被回收\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakReferenceDemo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" o1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" weakReference \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"--GC前\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        o1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//去掉强引用\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"--GC后\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//被回收了\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"虚引用PhantomReference\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"弱引用需要用java.lang.ref.PhantomReference类来实现。\")]),t._v(\" \"),a(\"li\",[t._v(\"顾名思义，就是形同虚设，与其它几种不同，虚引用并不会决定对象生命周期\")]),t._v(\" \"),a(\"li\",[t._v(\"**如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可以被GC回收。**它不能单独使用，需要和\"),a(\"code\",[t._v(\"引用队列ReferenceQueue\")]),t._v(\"联合使用。\")]),t._v(\" \"),a(\"li\",[t._v(\"PhantomReference.get()方法总是返回null，因此无法访问被引用对象。其意义在于说明一个对象已经进入了finalzation阶段，可以被gc回收，用来实现比finalzation机制更灵活的回收操作\")]),t._v(\" \"),a(\"li\",[t._v(\"换句话说，设置\"),a(\"code\",[t._v(\"虚引用PhantomReference\")]),t._v(\"关联的唯一目的，就是在这个对象被回收器回收时，收到一个系统通知或者后续添加进一步处理。java技术允许使用\"),a(\"code\",[t._v(\"finalize()\")]),t._v(\"方法在垃圾回收器将对象从内存中清除出去前做必要的清理工作（相当于AOP中的后置通知）。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"引用队列ReferenceQueue\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n* 引用可以单独使用，也可以配合ReferenceQueue使用\\n* 如果使用了ReferenceQueue，当GC是否对象内存时，会将其加入到ReferenceQueue中\\n* 程序发现某个软引用、弱引用、虚引用已经被加入到队列中，意味着其指向的堆heap内存对象被回收，通过这种方式，JVM允许我们在对象被回收后做一些我们想做的事\\n*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ReferenceQueueDemo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" o1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ReferenceQueue\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" queue \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ReferenceQueue\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"PhantomReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" weakReference \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"PhantomReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//有值\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//get为空，如果换成软引用就有值\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"poll\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//null\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"----------------------------\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        o1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"o1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//null\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakReference\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//null\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"poll\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//有值,gc后把值放入队列\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"软引用SoftReference 弱引用WeakReference使用场景\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"假如我们有一个应用需要读取大量图片\\n\"),a(\"ul\",[a(\"li\",[t._v(\"如果每次加载会严重影响性能\")]),t._v(\" \"),a(\"li\",[t._v(\"如果一次性加载到内存又可能内存溢出\")])])]),t._v(\" \"),a(\"li\",[t._v(\"此时软引用可以解决这个问题，设计思路用一个HashMap保存图片路径和相应图片对象关联的软引用之间映射关系，内存不足时，JVM会回收占用的空间\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Map\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Bitmap\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" imageCache \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HashMap\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SoftReference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Bitmap\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"WeakHashMap 是“弱键”实现的哈希表。它这个“弱键”的目的就是：实现对“键值对”的动态回收。当“弱键”不再被使用到时，GC会回收它，WeakReference也会将“弱键”对应的键值对删除。\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakHashMapDemo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakHashMap\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" weakHashMap \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakHashMap\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),t._v(\" k \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" v \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"val1\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        weakHashMap\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"put\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"k\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" v\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakHashMap\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        k \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//k失效以后\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"weakHashMap\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//map内容被移除\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"oom的认识\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#oom的认识\"}},[t._v(\"#\")]),t._v(\" OOM的认识\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"StackOverflowError\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"栈内存空间溢出（简单就是递归调用）\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"OutOfMemoryError:Java heap space\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"堆空间内存溢出，调整-Xms -Xmx\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"OutOfMemoryError:GC overhead limit exceeded\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"超过gc最高警戒，大部分资源都用来做gc回收了（超过98%资源都用来gc,但是回收不到2%heap内存），但是还是内存溢出\")]),t._v(\" \"),a(\"li\",[t._v(\"简单理解就是大量的new对象，导致回收不过来\"),a(\"code\",[t._v(\"（List<Integer> 循环添加 Integer对象）\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"OutOfMemoryError:Direct buffer memory\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"写NIO程序经常使用ByteBuffer来读取写入数据，它可以使用native函数库直接使用堆heap外内存（本地内存），然后通过一个存储在java堆heap里面的DirectByteBuffer对象作为内存的引用进行操作\"),a(\"code\",[t._v(\"ByteBuffer.allocteDirect()\")]),t._v(\"。如果只使用本地内存而堆内存使用很少，那JVM则不执行GC，ByteBuffer对象不会被回收，此时本地内存满了，再次尝试分配本地内存就会抛此异常。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"OutOfMemoryError:ubable to create new native thread\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"应用创建了太多线程，超出系统承载能力;或者你的服务器不允许创建这么多线程（linux默认单个进程可创建的线程数是1024个）；\")]),t._v(\" \"),a(\"li\",[t._v(\"解决办法就是：降低应用创建的线程数，分析是否需要这么多线程，将线程数降低；对于确实需要创建很多线程的且超过linux默认个数的，可以修改linux配置，扩大linux限制\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"OutOfMemoryError:Metaspace\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"使用\"),a(\"code\",[t._v(\"java -XX:+PrintFlagsInitial\")]),t._v(\"命令看MetaspaceSize初始化值\")]),t._v(\" \"),a(\"li\",[t._v(\"元空间内存不足，可以尝试调整 \"),a(\"code\",[t._v(\"-XX:MetaspaceSize=1024m\")])])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"gc垃圾回收算法和垃圾回收器的关系\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gc垃圾回收算法和垃圾回收器的关系\"}},[t._v(\"#\")]),t._v(\" **GC垃圾回收算法和垃圾回收器的关系？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"垃圾回收算法（计数、复制、标清、标整）是内存回收方法论，垃圾回收器是堆方法论的落地实现\")]),t._v(\" \"),a(\"li\",[t._v(\"目前还没有完美的垃圾回收器，只是对于不同场合，进行分代收集\")]),t._v(\" \"),a(\"li\",[t._v(\"四种主要的垃圾回收器\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"Serial 串行\")]),t._v(\"：它为单线程环境设计并且只使用一个线程进行垃圾回收，会暂停所有用户线程。不合适服务器环境。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"Parallel 并行\")]),t._v(\"：多个垃圾收集器并行工作，此时用户线程也是暂停的，适应科学计算、大数据处理等弱交互场景。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"CMS 并发\")]),t._v(\"：用户线程和垃圾回收线程同时执行（不一定并行，也可能交替执行），不需要停顿用户线程，适应对响应时间有要求的场景。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"G1\")])])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"怎么查看生产上垃圾回收器是哪个-生产上如何配置垃圾回收器的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#怎么查看生产上垃圾回收器是哪个-生产上如何配置垃圾回收器的\"}},[t._v(\"#\")]),t._v(\" **怎么查看生产上垃圾回收器是哪个？生产上如何配置垃圾回收器的\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"java -XX:+PrintCommandLineFlags -version\")]),t._v(\"查看默认垃圾回收器\\n\"),a(\"ul\",[a(\"li\",[t._v(\"默认Parallel\")])])]),t._v(\" \"),a(\"li\",[t._v(\"配置垃圾回收器有哪些\")])]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"h4\",{attrs:{id:\"垃圾回收器图\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#垃圾回收器图\"}},[t._v(\"#\")]),t._v(\" 垃圾回收器图\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"Serial\")]),t._v(\" \"),a(\"code\",[t._v(\"Parallel\")]),t._v(\" \"),a(\"code\",[t._v(\"ParNew\")]),t._v(\"是运行在新生代的垃圾回收器\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"Serial MSC\")]),t._v(\" \"),a(\"code\",[t._v(\"Parallel Old\")]),t._v(\" \"),a(\"code\",[t._v(\"CMS\")]),t._v(\"是运行在老年代的垃圾回收器\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"确定了新生代的垃圾回收器，系统会自动选择匹配的老年代垃圾回收器\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"G1回收器是跨越新生代、老年代的垃圾回收器\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"X号的表示被废弃的组合\\n\"),a(\"img\",{attrs:{src:t.$withBase(\"/jvm/gcq1.png\"),alt:\"dock\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"UseSerialGC\")]),t._v(\" \"),a(\"li\",[t._v(\"UseParallelGC\")]),t._v(\" \"),a(\"li\",[t._v(\"UseConcMarkSweepGC  (CMS 是缩写)\")]),t._v(\" \"),a(\"li\",[t._v(\"UseParNewGC (只在新生代使用并行垃圾回收器)\")]),t._v(\" \"),a(\"li\",[t._v(\"UseParallelOldGC (只在老年代使用并行垃圾回收器)\")]),t._v(\" \"),a(\"li\",[t._v(\"UseG1GC\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如何选择垃圾回收器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"预先参数说明（PrintGCDetails 看的参数对应）\\n\"),a(\"ul\",[a(\"li\",[t._v(\"DefNew -> Default New Generation\")]),t._v(\" \"),a(\"li\",[t._v(\"Tenured -> old\")]),t._v(\" \"),a(\"li\",[t._v(\"ParNew -> Parallel New Generation\")]),t._v(\" \"),a(\"li\",[t._v(\"PSYoungGen -> Parallel Scavenge\")]),t._v(\" \"),a(\"li\",[t._v(\"ParOldGen -> Parallel Old Generation\")])])]),t._v(\" \"),a(\"li\",[t._v(\"Server/Client模式 （只需掌握Server模式，Client模式基本不用）\\n\"),a(\"ul\",[a(\"li\",[t._v(\"32位win系统，默认Client模式\")]),t._v(\" \"),a(\"li\",[t._v(\"32位其它系统，2G内存同时2个CPU以上Server模式，低于该配置Client模式\")]),t._v(\" \"),a(\"li\",[t._v(\"64位都是Server模式\")])])])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"新生代收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新生代收集器\"}},[t._v(\"#\")]),t._v(\" 新生代收集器\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_1-serial串行收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-serial串行收集器\"}},[t._v(\"#\")]),t._v(\" 1.Serial串行收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Serial串行收集器 是最稳定最高效的收集器，缺点是会暂停用户线程，对于单核CPU，没有线程交互使用此收集器可以获取最高的垃圾回收效率。\\n\"),a(\"ul\",[a(\"li\",[t._v(\"因此Serial垃圾回收器是java虚拟机运行在Client模式下的新生代垃圾回收器\")]),t._v(\" \"),a(\"li\",[t._v(\"开启 \"),a(\"code\",[t._v(\"-XX:+UseSerialGC\")]),t._v(\",开启后默认使用 \"),a(\"strong\",[t._v(\"Serial + Serial old\")]),t._v(\"收集器组合\\n\"),a(\"ul\",[a(\"li\",[t._v(\"表示新生代老年代都使用串行垃圾回收器，新生代复制算法，老年代标记-整理算法\")])])])])])]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_2-parnew-并行收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-parnew-并行收集器\"}},[t._v(\"#\")]),t._v(\" 2.ParNew 并行收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"ParNew并行收集器 其实就是Serial的并行多线程版本，最常见的应用场景是配合老年代的GMS GC工作。它是很多java虚拟机运行在Server模式下的默认垃圾回收器\\n\"),a(\"ul\",[a(\"li\",[t._v(\"开启\"),a(\"code\",[t._v(\"-XX:+UseParNewGC\")]),t._v(\",开启后会使用\"),a(\"strong\",[t._v(\"ParNew + Serial old\")]),t._v(\"收集器组合\\n\"),a(\"ul\",[a(\"li\",[t._v(\"表示新生代老年代都使用串行垃圾回收器，\"),a(\"strong\",[t._v(\"新生代并行复制算法，老年代标记-整理算法\")])])])])])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"但是ParNew + Tenured（ParNew + Serial old）这样搭配已经不推荐\")]),t._v(\" \"),a(\"li\",[t._v(\"这个组合新生代回收时并行，老年代回收时串行\")])])]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_3-parallelscavenge收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-parallelscavenge收集器\"}},[t._v(\"#\")]),t._v(\" 3.ParallelScavenge收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"ParallelScavenge收集器 是一个类似ParNew,也是一个新生代垃圾收集器，新生代老年代都是串行化。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"开启\"),a(\"code\",[t._v(\"-XX:+UseParallelGC\")]),t._v(\"或\"),a(\"code\",[t._v(\"-XX:+UseParallelOldGC\")]),t._v(\"可相互激活（二选一都可），不配置系统默认就是这个\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"它关注重点是：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"可控的吞吐量(Thoughput=运行用户代码时间/(运行用户代码时间+垃圾回收时间)，即比如运行运行100分钟，垃圾回收1分钟。吞吐量就是99%)。高吞吐量意味着高效利用CPU时间，它多用于在后台运算而不需要太多交互的任务。（比如job？）\")]),t._v(\" \"),a(\"li\",[t._v(\"自适应调节策略也是ParallelScavenge收集器与ParNew收集器的一个重要区别。（自适应调节策略：虚拟机会根据当前系统运行情况收集性能监控信息，动态调整这些参数提供最适合的停顿时间（-XX:MaxGCPauseMillis）或最大吞吐量）\")])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"-XX:ParallelGCThreads=数字N，可配置GC线程个数\\n\"),a(\"ul\",[a(\"li\",[t._v(\"CPU > 8 N= 5/8\")]),t._v(\" \"),a(\"li\",[t._v(\"CPU < 8 N = 实际数\")])])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"老年代收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#老年代收集器\"}},[t._v(\"#\")]),t._v(\" 老年代收集器\")]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_4-parallelold收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-parallelold收集器\"}},[t._v(\"#\")]),t._v(\" 4.ParallelOld收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"ParallelOld收集器是ParallelScavenge收集器的老年代版本，使用\"),a(\"strong\",[t._v(\"多线程标记-整理算法\")])]),t._v(\" \"),a(\"li\",[t._v(\"jdk8以后可以考虑Parallel Scavenge + Parallel Old搭配（ParallelOld是jdk6以后提供，jdk6之前默认 ParallelScavenge + Serial Old搭配）\\n\"),a(\"ul\",[a(\"li\",[t._v(\"开启\"),a(\"code\",[t._v(\"-XX:+UseParallelOldGC\")])])])])]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_5-cms-concmarksweep-并发标记清除收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-cms-concmarksweep-并发标记清除收集器\"}},[t._v(\"#\")]),t._v(\" 5.CMS（ConcMarkSweep）并发标记清除收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"CMS收集器是一种 \"),a(\"strong\",[t._v(\"获取最短回收停顿时间为目标的收集器。\")]),t._v(\" 适应互联网或者B/S系统服务器，这类应用重视服务响应速度，希望系统停顿时间最短。\")]),t._v(\" \"),a(\"li\",[t._v(\"CMS非常适合堆内存大，CPU核数多的服务端应用，也是G1出现前的首选收集器。\")]),t._v(\" \"),a(\"li\",[t._v(\"用户线程和GC线程并发\\n\"),a(\"ul\",[a(\"li\",[t._v(\"开启\"),a(\"code\",[t._v(\"-XX:+UseConcMarkSweepGC\")]),t._v(\"，开启后新生代默认使用ParNew。\")]),t._v(\" \"),a(\"li\",[t._v(\"开启后，收集器组合是 \"),a(\"code\",[t._v(\"ParNew(新生代) + CMS（老年代）+Serial old（老年代）\")]),t._v(\" 的组合，Serial Old是作为CMS出错后的后备收集器。\")])])]),t._v(\" \"),a(\"li\",[t._v(\"CMS运行的4步过程\\n\"),a(\"ul\",[a(\"li\",[t._v(\"初始标记 ：只是标记一下GC Roots能直接关联的对象，速度很快，仍然需要暂停所有工作线程\")]),t._v(\" \"),a(\"li\",[t._v(\"并发标记 ：进行GC Roots跟踪过程，和用户线程一起工作，不需要暂停工作线程。主要标记过程，标记全部对象\")]),t._v(\" \"),a(\"li\",[t._v(\"重新标记 : 为了修正并发标记过程中，因用户程序运行产生的一小部分对象变动。仍然需要暂停所有工作线程\")]),t._v(\" \"),a(\"li\",[t._v(\"并发清除 ：清除了GC Roots不可达对象，和用户线程一起工作，不需要暂停工作线程。\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"由于耗时最长的 \"),a(\"strong\",[t._v(\"并发标记 + 并发清除\")]),t._v(\"都是和用户线程一起工作，所以总体可以看作CMS垃圾回收和用户线程是并发执行。\")]),t._v(\" \"),a(\"li\",[t._v(\"优点：并发收集低停顿\")]),t._v(\" \"),a(\"li\",[t._v(\"缺点：1.并发堆CPU压力比较大（由于CMS必须要在老年代堆内存用尽之前完成垃圾回收，否则CMS回收失败时，会触发Serial Old进行GC，从而造成较大停顿）2.采用标记清除算法会产生大量空间碎片\")]),t._v(\" \"),a(\"li\",[t._v(\"由于标记清除无法处理空间碎片，老年代空间迟早会被耗尽，最后不得不通过担保机制Serial Old来对内存压缩。CMS也提供了参数-XX:CMSFullGCsBeForeCompaction(默认0，即每次都进行内存整理)来指定多少次CMS收集以后，进行一次压缩的Full GC\")])])]),t._v(\" \"),a(\"h5\",{attrs:{id:\"_6-serialold收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-serialold收集器\"}},[t._v(\"#\")]),t._v(\" 6.SerialOld收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Serial Old垃圾收集器是Serial的老年代版本，同样是单线程收集器，使用的是\"),a(\"strong\",[t._v(\"标记-整理算法\")]),t._v(\"，也是client默认的老年代收集器\\n\"),a(\"ul\",[a(\"li\",[t._v(\"作为CMS收集器的后备老年代收集器（实际JDK8+已经淘汰掉了，不主动配置此收集器）\")])])])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"组合选择\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组合选择\"}},[t._v(\"#\")]),t._v(\" 组合选择\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"单CPU小内存\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"-XX:+UseSerialGC\")])])])]),t._v(\" \"),a(\"li\",[t._v(\"多CPU，需要大吞吐量，接受小停顿\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"-XX:+UseParllelGC\")]),t._v(\" 或 \"),a(\"code\",[t._v(\"-XX:+UseParllelOldGC\")])])])]),t._v(\" \"),a(\"li\",[t._v(\"多CPU，追求低停顿，快速响应\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"-XX:+UseConcMarkSweepGC\")]),t._v(\" \"),a(\"code\",[t._v(\"-XX:+ParNewGC\")])])])])]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"参数\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"新生代收集器\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"新生代算法\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"老年代收集器\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"老年代算法\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[a(\"code\",[t._v(\"-XX:+UseSerialGC\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Serial\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"复制\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Serial Old\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"标整\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[a(\"code\",[t._v(\"-XX:+UseParNewGC\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"ParNew\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"复制\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Serial Old\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"标整\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[a(\"code\",[t._v(\"-XX:+UseParallelGC\")]),t._v(\" \"),a(\"code\",[t._v(\"-XX:+UseParallelOldGC\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Parallel[Scavenge]\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"复制\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Parallel Old\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"标整\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[a(\"code\",[t._v(\"-XX:+UseConcMarkSweepGC\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"ParNew\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"复制\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"CMS + Serial Old\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"标清\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[a(\"code\",[t._v(\"-XX:+UseG1GC\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"G1整体使用标记-整理算法\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"局部使用复制算法，不会产生内存碎片\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"right\"}})])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"g1垃圾回收器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#g1垃圾回收器\"}},[t._v(\"#\")]),t._v(\" **G1垃圾回收器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"G1收集器是一款面向服务端应用的收集器，它像CMS一样，能与应用程序线程并发执行。\")]),t._v(\" \"),a(\"li\",[t._v(\"G1目标是取代CMS，相比CMS，以下表现更出色\\n\"),a(\"ul\",[a(\"li\",[t._v(\"G1有整理内存的过程，不会产生内存碎片。\")]),t._v(\" \"),a(\"li\",[t._v(\"G1的Stop The World(stw)更可控，G1在停顿时间上增加了预测机制，用户可以指定期望停顿时间。\")])])]),t._v(\" \"),a(\"li\",[t._v(\"主要改变时Eden Survivor Tenured等区域不是连续的了（以前这三个区域是一块连续的内存），而是变成了一个个大小一样的region,每个region从1m~32m不等。一个region有可能属于Eden，Survivor或者Tenured内存区域。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"g1特点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#g1特点\"}},[t._v(\"#\")]),t._v(\" G1特点\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"G1重复利用多CPU、多核硬件优势，尽量缩短STW。\\n\"),a(\"ul\",[a(\"li\",[t._v(\"解释：多CPU可以同时处理多个region\")])])]),t._v(\" \"),a(\"li\",[t._v(\"G1整体采用标记-整理算法，局部复制算法，不会有内存碎片\")]),t._v(\" \"),a(\"li\",[t._v(\"G1讲把Eden、Survivor、Tenured混合再一起了，微观上还是保留了新生代老年代，它们变成了一些region的集合且不需要region是连续的，也就是说还是会采用不同的GC方式来处理不同的region\")]),t._v(\" \"),a(\"li\",[t._v(\"G1虽然区分新生代老年代，但不是物理上的区别。G1只是逻辑上的分代概念，或者说每个region都可能随G1的运行在不同代之间切换。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"g1底层原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#g1底层原理\"}},[t._v(\"#\")]),t._v(\" G1底层原理\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"region区域化垃圾收集器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"最大好处化整为零，避免全内存扫描，只需要按区域region进行扫描\")]),t._v(\" \"),a(\"li\",[t._v(\"G1不要求堆内存存储在物理上连续，只需要逻辑连续即可。启动时可以通过参数\"),a(\"code\",[t._v(\"-XX:G1HeapRegionSize=n\")]),t._v(\"来指定分区大小(1~32m，且必须是2的幂)，默认将整个堆分为2048个region(所以最大支持内存为 32m*2048 =64G)\")]),t._v(\" \"),a(\"li\",[t._v(\"G1仍然属于分代收集器，一些region属于新生代，新生代垃圾收集器仍然会采用暂停所有用户线程的方式，把活着对象转到Surivor的region空间或者Tenured的region空间\")]),t._v(\" \"),a(\"li\",[t._v(\"一部分Tenured的region，G1收集器通过将对象从一个region复制到另一个region,完成清理工作，意味着这个过程中，G1完成了堆的整理（至少是部分的堆整理），解决了内存碎片问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"在G1中还存在一个特殊的region区域，叫Humongous(巨大的)区域。如果一个对象占用空间超过的region分区容量50%以上，G1会认为其是大对象**默认分配到Tenured区域。**但它又是一个短期存在的对象，为了避免对垃圾回收器产生负面影响，G1专门划了Humongous区域，存放大对象，如果大对象占用空间超过了一个region,G1会寻找多个连续的region来存放，为了能找到连续的分区，有时候不得不启动Full GC\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"回收步骤\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"4步过程\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"生产环境服务器变慢的诊断思路、以及如何性能评估\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生产环境服务器变慢的诊断思路、以及如何性能评估\"}},[t._v(\"#\")]),t._v(\" 生产环境服务器变慢的诊断思路、以及如何性能评估\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"生产环境cpu占用过高的可能原因\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生产环境cpu占用过高的可能原因\"}},[t._v(\"#\")]),t._v(\" 生产环境CPU占用过高的可能原因\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"jdk自带的jmm监控和性能分析工具用法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk自带的jmm监控和性能分析工具用法\"}},[t._v(\"#\")]),t._v(\" JDK自带的JMM监控和性能分析工具用法\")])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}