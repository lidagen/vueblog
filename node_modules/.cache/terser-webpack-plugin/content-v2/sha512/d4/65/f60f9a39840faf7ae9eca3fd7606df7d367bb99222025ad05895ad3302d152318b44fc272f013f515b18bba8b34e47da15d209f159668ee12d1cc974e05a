{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{338:function(t,s,n){\"use strict\";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h2\",{attrs:{id:\"设计模式之单例模式-singleton\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设计模式之单例模式-singleton\"}},[t._v(\"#\")]),t._v(\" 设计模式之单例模式——Singleton\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"定义\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义\"}},[t._v(\"#\")]),t._v(\" 定义\")]),t._v(\" \"),n(\"p\",[t._v(\"确保一个类只有一个实例，并提供一个全局访问方法\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"单例模式创建方法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单例模式创建方法\"}},[t._v(\"#\")]),t._v(\" 单例模式创建方法\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"私有化构造器\")]),t._v(\" \"),n(\"li\",[t._v(\"提供一个静态方法获取实例\")])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"单例模式实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单例模式实现\"}},[t._v(\"#\")]),t._v(\" 单例模式实现\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"经典的单例模式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#经典的单例模式\"}},[t._v(\"#\")]),t._v(\" 经典的单例模式\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 静态成员变量\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 私有化构造器\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n    静态方法获取实例\\n    */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            singleton \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"此模式是\"),n(\"strong\",[t._v(\"延迟\")]),t._v(\"实例化对象，在需要获取对象的时候，调用\"),n(\"code\",[t._v(\"getInstance()\")]),t._v(\"方法来实例化。是通常称为的懒汉式，但此方法还不是最优解。想象一下，在多线程环境中，线程A和线程B同时进入\"),n(\"code\",[t._v(\"getInstance()\")]),t._v(\"发现singleton为空，这时候有可能创建多个singleton导致JVM中存在不止一个对象。\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"这时候我们自然想到了\"),n(\"code\",[t._v(\"synchronized\")]),t._v(\"关键字来解决多线程并发导致的问题。\")])])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"线程安全的单例模式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程安全的单例模式\"}},[t._v(\"#\")]),t._v(\" 线程安全的单例模式\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 静态成员变量\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 私有化构造器\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n    加了synchronized关键字的静态方法获取实例\\n    */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            singleton \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"再想想这种方式的缺点是什么？其实只有第一次实例化对象的时候需要同步，之后的每次调用此方法，synchronized都是个累赘。同步一个方法可能造成程序执行效率下降100倍，如果\"),n(\"code\",[t._v(\"getInstance()\")]),t._v(\"会频繁调用，那这个方式值得重新考虑。\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"我们考虑\"),n(\"strong\",[t._v(\"急切\")]),t._v(\"创建实例，而不是\"),n(\"strong\",[t._v(\"延迟\")]),t._v(\"实例化的做法，即通常所称的饿汉式单例方法。\")])])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"饿汉式创建单例\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#饿汉式创建单例\"}},[t._v(\"#\")]),t._v(\" 饿汉式创建单例\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * jvm加载初始化此实例\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" singleton \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 私有化构造器\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"利用这种方法，可以在JVM加载时，立刻创建此实例，这就保证了在任何线程在获取singleton静态变量前，一定先创建此实例。\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"这种方式也有它的缺点，就是不管是否使用该实例，都会初始化，如果此实例开销过大，不必要的创建此实例会造成资源的浪费。\")])])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"双重检查加锁创建单例\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#双重检查加锁创建单例\"}},[t._v(\"#\")]),t._v(\" \"),n(\"strong\",[t._v(\"双重检查加锁\")]),t._v(\"创建单例\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"在进行双重检查加锁前，先来个错误的示例:\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**错误示例\\npublic class SimpleSingleton {\\n  \\n    private static SimpleSingleton singleton;\\n\\n    private SimpleSingleton() {\\n    }\\n\\n    public static synchronized SimpleSingleton getInstance() {\\n        if (null == singleton){\\n            synchronized (SimpleSingleton.class){\\n                if (null == singleton){\\n                    singleton = new SimpleSingleton();//error\\n                }\\n            }\\n        }\\n        return singleton;\\n    }\\n}**/\")]),t._v(\"\\n\")])])]),n(\"div\",{staticClass:\"custom-block warning\"},[n(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"WARNING\")]),t._v(\" \"),n(\"p\",[t._v(\"错误事例的隐患：\\n上面代码error部分，实际上可以分解为3步：\\n1.分配内存空间\\n2.初始化对象\\n3.将对象指向刚分配的内存空间\")]),t._v(\" \"),n(\"p\",[t._v(\"但是有些编译器为了性能问题，可能将第二步和第三步重排序，结果变成了：\\n1.分配内存空间\\n2.将对象指向刚分配的内存空间\\n3.初始化对象\")]),t._v(\" \"),n(\"p\",[t._v(\"考虑指令重排的情况下，两个线程会发生如下调用：\")]),t._v(\" \"),n(\"table\",[n(\"thead\",[n(\"tr\",[n(\"th\",[t._v(\"TIME\")]),t._v(\" \"),n(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Thread A\")]),t._v(\" \"),n(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Thread B\")])])]),t._v(\" \"),n(\"tbody\",[n(\"tr\",[n(\"td\",[t._v(\"T1\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"检查到\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"为空\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T2\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"获取锁\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T3\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"再次检查到\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"为空\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T4\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"为\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"分配内存空间\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T5\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"将\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"指向内存空间\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T6\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"检查到\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"不为空\")])]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T7\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"访问\"),n(\"code\",[t._v(\"singleton\")]),t._v(\"（此时对象还未完成初始化）\")])]),t._v(\" \"),n(\"tr\",[n(\"td\",[t._v(\"T8\")]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"初始化\"),n(\"code\",[t._v(\"singleton\")])]),t._v(\" \"),n(\"td\",{staticStyle:{\"text-align\":\"center\"}})])])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"在这种情况下，T7时刻线程B对singleton的访问，访问的是一个初始化未完成的对象。\")]),t._v(\" \"),n(\"li\",[t._v(\"使用了volatile关键字后，重排序被禁止，所有的写（write）操作都将发生在读（read）操作之前。\")])])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"正确的双重检查加锁：\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * volatile 修饰变量\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"volatile\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 私有化构造器\\n     */\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//1\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//2.\")]),t._v(\"\\n                    singleton \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SimpleSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" singleton\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"双重检查锁（double checked locking）运行的逻辑：线程A和线程B同时进入了步骤1，这时候线程A获取了锁，创建了对象。线程B等待之后获取锁，进入步骤2,发现实例已不为null,返回。\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"volatile 关键字确保singleton被初始化成SimpleSingleton实例时，多个线程正确的处理singleton变量。（保持内存可见性和防止指令重排序）\")])])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"单例模式和静态类的对比\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单例模式和静态类的对比\"}},[t._v(\"#\")]),t._v(\" 单例模式和静态类的对比\")]),t._v(\" \"),n(\"p\",[t._v(\"单例模式和静态类都能确保JVM中只存在一个对象，那他们的区别是什么。\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"首先单例模式会提供给你一个全局唯一的对象，静态类只是提供给你很多静态方法，这些方法不用创建对象，通过类就可以直接调用\")]),t._v(\" \"),n(\"li\",[t._v(\"如果是一个非常重的对象，单例模式可以懒加载，静态类就无法做到\")])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}