{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{381:function(t,s,a){\"use strict\";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"应用容器引擎-docker\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用容器引擎-docker\"}},[t._v(\"#\")]),t._v(\" 应用容器引擎-Docker\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"docker-概述\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-概述\"}},[t._v(\"#\")]),t._v(\" Docker 概述\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"docker是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker是什么\"}},[t._v(\"#\")]),t._v(\" docker是什么\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Docker作为一个软件集装箱化平台，可以让开发者构建应用程序时，将它与其依赖环境一起打包到一个容器中，然后很容易地发布和应用到任意平台中。在操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"上面说的比较官方，简单来说，docker是一个能让应用运行的容器，类似虚拟机。\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Docker与传统虚拟机比较\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"docker 启动快速属于秒级别。虚拟机通常需要几分钟去启动\")]),t._v(\" \"),a(\"li\",[t._v(\"docker 需要的资源更少， docker 在操作系统级别进行虚拟化， docker 容器和内核交互，几乎没有性能损耗，性能优于通过 Hypervisor 层与内核层的虚拟化\")]),t._v(\" \"),a(\"li\",[t._v(\"docker 更轻量， docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境， Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高\")]),t._v(\" \"),a(\"li\",[t._v(\"与虚拟机相比， docker 隔离性更弱， docker 属于进程之间的隔离，虚拟机可实现系统级别隔离\")]),t._v(\" \"),a(\"li\",[t._v(\"安全性： docker 的安全性也更弱。 Docker 的租户 root 和宿主机 root 等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户 root 权限和宿主机的 root 虚拟机权限是分离的，并且虚拟机利用如 Intel 的 VT-d 和 VT-x 的 ring-1 硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击\")]),t._v(\" \"),a(\"li\",[t._v(\"可管理性： docker 的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如 VMware vCenter 提供完备的虚拟机管理能力\\n高可用和可恢复性： docker 对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制， VMware 可承诺虚拟机 99.999% 高可用，保证业务连续性\")]),t._v(\" \"),a(\"li\",[t._v(\"快速创建、删除：虚拟化创建是分钟级别的， Docker 容器创建是秒级别的， Docker 的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间\")]),t._v(\" \"),a(\"li\",[t._v(\"交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化。 Docker 在 Dockerfile 中记录了容器构建过程，可在集群中实现快速分发和快速部署\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"docker-核心\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-核心\"}},[t._v(\"#\")]),t._v(\" Docker 核心\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"docker-三个基本概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-三个基本概念\"}},[t._v(\"#\")]),t._v(\" docker 三个基本概念:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"Images (镜像)\")]),t._v(\" : 镜像可以看作一个文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"Container (容器)\")]),t._v(\" : 容器是放置，运行镜像的地方，里面运行着我们指定的应用。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"Repository (仓库)\")]),t._v(\" : 仓库可以看作存放镜像的地方，当镜像构建完成后，我们需要一个集中存储，分发管理的服务。仓库类似于我们之前常用的代码仓库。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"docker-的优势\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-的优势\"}},[t._v(\"#\")]),t._v(\" Docker 的优势\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下,简单来说，docker的标准化让快速扩展，弹性伸缩变得简单。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"举个例子：小明写了一个系统，该系统的技术栈非常广，需要依赖于各种开源库和中间件。如果按照纯手动的部署方式，小明需要安装各种开源软件，还需要写好每个开源软件的配置文件。如果只是部署一次，这点时间开销还是可以接受的，但如果小明每隔几天就需要换个服务器去部署他的程序，那么这些繁琐的重复工作无疑是会令人发狂的。这时候，Docker的用处就派上场了，小明只需要根据应用程序的部署步骤编写一份Dockerfile文件（将安装、配置等操作交由Docker自动化处理），然后构建并发布他的镜像，这样，不管在什么机器上，小明都只需要拉取他需要的镜像，然后就可以直接部署运行了，这正是Docker的魅力所在。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"docker安装\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker安装\"}},[t._v(\"#\")]),t._v(\" docker安装\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"根据自己的系统下载安装docker\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"登陆 \"),a(\"code\",[t._v(\"https://cr.console.aliyun.com/\")]),t._v(\"，按照操作文档配置阿里云镜像\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"docker命令\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker命令\"}},[t._v(\"#\")]),t._v(\" docker命令\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"镜像命令\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#镜像命令\"}},[t._v(\"#\")]),t._v(\" 镜像命令\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#拉取一个 docker 镜像,不指定版本默认最新:latest\")]),t._v(\"\\ndocker pull java\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 拉取一个指定版本\")]),t._v(\"\\ndocker pull java:8\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 查看镜像\")]),t._v(\"\\ndocker images\\n\")])])]),a(\"h4\",{attrs:{id:\"容器命令\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器命令\"}},[t._v(\"#\")]),t._v(\" 容器命令\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"启动容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#启动容器\")]),t._v(\"\\ndocker run \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"OPTION\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"  IMAGE \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"COMMAND\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"ARG\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"..\")]),t._v(\".\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# OPTION 说明\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--\\n    --name 为容器起一个新名称\\n    -d 后台启动容器，守护线程的方式，返回id\\n    -i  交互式模式启动容器，通常与-t一起使用\\n    -t  为容器重新分配一个伪输入终端\\n    -P 随即端口启动\\n    -p 指定端口映射，有以下四种格式：\\n      ip:hostPort:containerPort\\n      ip::containerPort\\n      hostPort:containerPort\\n      containerPort\\n --\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 运行一个镜像，并对其指定端口映射(springboot_web的 8080端口映射为80)\")]),t._v(\"\\ndocker run -d -p \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"80\")]),t._v(\":8080 springboot_web\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 运行这个容器中的镜像的话，并且调用镜像里面的 bash\")]),t._v(\"\\ndocker run -it container_name/container_id /bin/bash\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"退出容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exit\")]),t._v(\" 停止容器\\nctrl+p+q 不停止容器退出容器终端\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"列出所以正在运行的容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 查看哪些容器运行\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ps\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"OPTION\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# OPTION说明\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"--\\n-a 正在运行和历史运行的容器\\n-l  显示最近创建的容器\\n-n 显示最近n个创建的容器\\n-q  静默模式，只显示容器id\\n--no-trunc 不截断输出 \\n--\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"启动容器、 重启、停止容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 启动、重启、停止容器\")]),t._v(\"\\ndocker start container_name/container_id\\ndocker restart container_name/container_id\\ndocker stop container_name/container_id\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 如果我们需要删除某个镜像，需要先停止容器，然后删除容器，最后删除镜像\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ps\")]),t._v(\"\\ndocker stop container_name/container_id\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"rm\")]),t._v(\" container_name/container_id\\ndocker rmi image_name\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 强制停止容器\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"kill\")]),t._v(\" container_name/container_id\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#删除多个容器\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"rm\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$(\")]),t._v(\"docker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ps\")]),t._v(\" -a -q\"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\")\")])]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"容器重要命令\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器重要命令\"}},[t._v(\"#\")]),t._v(\" 容器重要命令\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"启动守护式容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker run -d container_name/container_id\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"查看容器日志\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# -t 加入时间戳  -f不停的追加（动态） -tail linux命令 尾巴\")]),t._v(\"\\ndocker logs -f -t --tail container_id\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"查看容器运行的线程\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"top\")]),t._v(\" container_id\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"查看容器内部细节\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker inspect container_id\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"进入正在运行的容器并以命令交互\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 对容器进行bashShell操作，得到结果回到宿主机\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exec\")]),t._v(\" -t container_id bashShell \\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 直接进入容器并启动终端\")]),t._v(\"\\ndocker attach container_id\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"从容器内拷贝数据到主机\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cp\")]),t._v(\" container_id:容器内路径 目的主机路径\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"这里罗列是常用命令，更多命令参照:\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker --help\\n\")])])]),a(\"h3\",{attrs:{id:\"镜像原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#镜像原理\"}},[t._v(\"#\")]),t._v(\" 镜像原理\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"镜像就像一层层的嵌套，比如一个tomcat,它下面依赖jdk,jdk又依赖centos。层都是只读的，只有最上面一层是可写。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"容器数据卷\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器数据卷\"}},[t._v(\"#\")]),t._v(\" 容器数据卷\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"容器卷能干什么：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"用来持久花容器中运行产生的数据。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"容器之间希望可以共享数据（一边修改另一边也改变）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"容器和宿主机之间共享数据（一边修改另一边也改变）\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"容器卷的特点：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"数据卷可以在容器之间共享或者重用数据\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"卷中的更改可以直接生效\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"数据卷的更改不会包含在镜像的更新中\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"数据卷的生命周期一直持续到没有容器使用它为止\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"容器中添加容器卷\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"直接命令添加\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker run -it -v /宿主机绝对路径:/容器内目录    镜像名\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# centos 宿主机/media/ws/disk1/下生成myVolume，镜像中根目录生成volume目录\")]),t._v(\"\\ndocker run -it -v /media/ws/disk1/myVolume:/volume centos\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 只允许宿主机单项写入，容器内只读\")]),t._v(\"\\ndocker run -it -v /media/ws/disk1/volume:/volume:ro centos\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#  tips 容器停止后，主机修改数据，容器重启仍然会同步\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"Dockerfile添加\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Dockerfile 简单来说是构建镜像内容的一组命令。通过Dockerfile我们可以自定义镜像，让其能够运行在容器中。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"比喻：\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"Hello.java \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" Hello.class\\n\\nDocker images \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" Dockerfile\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"步骤\\n\"),a(\"ul\",[a(\"li\",[t._v(\"目录下新建Dockerfile\\n\"),a(\"ul\",[a(\"li\",[t._v(\"Dockerfile新建VOLUME来个容器创建一个或多个容器卷\")])])]),t._v(\" \"),a(\"li\",[t._v(\"File构建\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# mkdir一个mydocker文件夹\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# touch一个Dockerfile\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# vi 编辑以下内容:wq!\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 创建两个容器卷dataVolumeContainer1 dataVolumeContainer2\")]),t._v(\"\\nFROM centos\\nVOLUME \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"/dataVolumeContainer1\"')]),t._v(\",\"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"/dataVolumeContainer2\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\nCMD \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"echo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"finished,--------------success\"')]),t._v(\"\\nCMD /bin/bash\\n\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"build后生成镜像\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker build -f /mydocker/Dockerfile -t ws/mycentos \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\".\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"run容器\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker run -it ws/centos /bin/bash\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"如何跟宿主机关联？\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 重开终端或者var/bin/docker/volumes中查找\")]),t._v(\"\\ndocker inspect ws/centos\\n\")])])]),a(\"h3\",{attrs:{id:\"dockerfile\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile\"}},[t._v(\"#\")]),t._v(\" DOCKERFILE\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"dockerfile是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile是什么\"}},[t._v(\"#\")]),t._v(\" Dockerfile是什么\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Dockerfile是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"构建三步骤:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Dockerfile\")]),t._v(\" \"),a(\"li\",[t._v(\"docker build\")]),t._v(\" \"),a(\"li\",[t._v(\"docker run\")])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"dockerfile的构建过程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile的构建过程\"}},[t._v(\"#\")]),t._v(\" Dockerfile的构建过程\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Dockerfile内容的基础知识：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"每条保留指令都必须大写，并且后面必须跟随至少一个参数\")]),t._v(\" \"),a(\"li\",[t._v(\"指令从上到下顺序执行\")]),t._v(\" \"),a(\"li\",[t._v(\"#表示注释\")]),t._v(\" \"),a(\"li\",[t._v(\"每条指令会创建一个新的镜像层，并对镜像进行提交\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"docker执行Dockerfile大致流程：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"docker从基础镜像运行一个容器\")]),t._v(\" \"),a(\"li\",[t._v(\"执行一条指令对容器作出修改\")]),t._v(\" \"),a(\"li\",[t._v(\"执行类似docker commit的命令提交一个新的镜像层\")]),t._v(\" \"),a(\"li\",[t._v(\"docker再基于刚提交的镜像运行一个新容器\")]),t._v(\" \"),a(\"li\",[t._v(\"执行Dockerfile中的下一条指令直到所有执行执行完成\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"dockerfile的体系结构-保留字指令\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile的体系结构-保留字指令\"}},[t._v(\"#\")]),t._v(\" Dockerfile的体系结构（保留字指令）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"FROM\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"当前镜像是基于哪个镜像（scratch是最上层的镜像，类似java中的Object）\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"MAINTAINER\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"镜像维护者以及邮箱\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"RUN\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"构建时需要运行的命令\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"EXPOSE\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对外暴露的端口\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"WORKDIR\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"指定在创建容器后，终端进入(-it)后默认的工作目录\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"ENV\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"用来在构建镜像过程中设置环境变量\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"ADD\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"将宿主机目录下的文件拷贝进镜像，且命令会自动处理URL和解压tar包\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"COPY\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"类似ADD，拷贝文件到镜像，\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"VOLUME\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"数据容器卷，用来保存容器数据到宿主机\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"CMD\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"指定一个容器运行时要执行的命令\")]),t._v(\" \"),a(\"li\",[t._v(\"Dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"ENTRYPOINT\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"指定一个容器运行时要执行的命令\")]),t._v(\" \"),a(\"li\",[t._v(\"ENTRYPOINT和CMD一样，都是在指定容器启动程序和参数\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"ONBUILD\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD会被触发\")])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"案例\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#案例\"}},[t._v(\"#\")]),t._v(\" 案例\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"Base镜像scratch\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"docker hub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"自定义镜像mycentos\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"假设我们下载的centos以及不满足使用的，我需要一个能运行vim的centos.\")]),t._v(\" \"),a(\"li\",[t._v(\"构建Dockerfile\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"FROM centos\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#定义/tmp别名mypath\")]),t._v(\"\\nENV mypath /tmp\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#默认工作目录为mypath\")]),t._v(\"\\nWORKDIR \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$mypath\")]),t._v(\"\\nRUN yum -y \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"install\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"vim\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#暴露的端口\")]),t._v(\"\\nEXPOSE \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"80\")]),t._v(\"\\nCMD /bin/bash\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"build\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker build -f /media/ws/disk1/docker/mydocker/Dockerfile  -t vim/centos \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\".\")]),t._v(\"\\n\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"run\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker run -it vim/centos /bin/bash\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"test\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 可以看到直接进的是/tmp目录\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#目录下 touch 1.md\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# vim 进入测试vim安装是否成功\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"CMD/ENTRYPOINT镜像案例\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"假设一个场景，我们做一个镜像，需要crul来获取\"),a(\"code\",[t._v(\"https://ip.cn/\")]),t._v(\"中的ip信息。首先考虑CMD命令版本的\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"FROM centos\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#如果centos中没有curl安装一个\")]),t._v(\"\\nRUN yum \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"install\")]),t._v(\" -y \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#相当于命令 curl -s https://ip.cn\")]),t._v(\"\\nCMD \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"curl\"')]),t._v(\",\"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"-s\"')]),t._v(\",\"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"https://ip.cn\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n```\\n\")])])])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"之后我们build（myip）镜像然后run（docker run -it myip)，成功返回ip\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"这时我们需要链接返回更多的信息，比如链接的请求头，类似于命令 \"),a(\"code\",[t._v(\"curl -s -i https://ip.cn\")]),t._v(\"返回报文头加ip，这时候在run上追加 -i\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker run -it myip -i\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"这时候会报错，相当于后一个-i的CMD命令覆盖了Dockerfile中的CMD命令。这时候需要ENTRYPOINT命令。\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"FROM centos\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#如果centos中没有curl安装一个\")]),t._v(\"\\nRUN yum \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"install\")]),t._v(\" -y \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"curl\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#相当于命令 curl -s https://ip.cn\")]),t._v(\"\\nENTRYPOINT \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"curl\"')]),t._v(\",\"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"-s\"')]),t._v(\",\"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"https://ip.cn\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"之后重复上面步骤，完成！\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"CMD 和 ENTRYPOINT都是执行命令，不同点是ENTRYPOINT是追加，CMD是覆盖。类似StringBuilder和String\")]),t._v(\" \"),a(\"li\",[t._v(\"curl 命令参考文档\")])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"自定义镜像tomcat9\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"准备工作：\\n\"),a(\"ul\",[a(\"li\",[t._v(\"选择一个路径mkdir一个mytomcat9文件夹\")]),t._v(\" \"),a(\"li\",[t._v(\"文件夹下准备jdk8和tomcat9的tar包\")]),t._v(\" \"),a(\"li\",[t._v(\"touch一个cp.txt文件\")]),t._v(\" \"),a(\"li\",[t._v(\"touch一个Dockerfile文件\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#vim进入Dockerfile\")]),t._v(\"\\nFROM centos\\nMAINTAINER gendali\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"wal365@126.com\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#copy宿主机的cp.txt到镜像为container.txt\")]),t._v(\"\\nCOPY cp.txt /usr/local/container.txt\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#把jdk和tomcat添加容器中\")]),t._v(\"\\nADD jdk-8u221-linux-x64.tar.gz /usr/local/\\nADD apache-tomcat-9.0.30.tar.gz /usr/local/\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#安装VIM\")]),t._v(\"\\nRUN yum \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"install\")]),t._v(\" -y \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"vim\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#设置登陆落脚点\")]),t._v(\"\\nENV MYPATH /usr/local\\nWORKDIR \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$MYPATH\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#配置jdk和tomcat环境变量\")]),t._v(\"\\nENV JAVA_HOME /usr/local/jdk1.8.0_221\\nENV CLASSPATH \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$JAVA_HOME\")]),t._v(\"/lib/dt.jar:\"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$JAVA_HOME\")]),t._v(\"/lib/tools.jar\\nENV CATALINA_HOME /usr/local/apache-tomcat-9.0.30\\nENV CATALIAN_BASE /usr/local/apache-tomcat-9.0.30\\nENV \"),a(\"span\",{pre:!0,attrs:{class:\"token environment constant\"}},[t._v(\"PATH\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token environment constant\"}},[t._v(\"$PATH\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\":\")]),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$JAVA_HOME\")]),t._v(\"/bin:\"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$CATALINA_HOME\")]),t._v(\"/lib:\"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$CATALINA_HOME\")]),t._v(\"/bin\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#容器运行时的监听端口\")]),t._v(\"\\nEXPOSE \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#启动时运行tomcat\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('#ENTRYPOINT [\"/usr/local/apache-tomcat-9.0.30/bin/startup.sh\"]')]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('#CMD [\"/usr/local/apache-tomcat-9.0.30/bin/catanlina.sh\",\"run\"]')]),t._v(\"\\nCMD /usr/local/apache-tomcat-9.0.30/bin/startup.sh \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"tail\")]),t._v(\" -F /usr/local/apache-tomcat-9.0.30/bin/logs/catalina.out\\n\")])])])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"用-v命令run 这个镜像，添加容器卷\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 这个长命令分解来看，-p对外端口映射为8090，--name 名字叫mytom9 \")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# -v绑定两个数据卷到宿主机，方便部署项目和看日志\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# --privileged=true 防止写权限不够\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# mytomcat9是镜像名\")]),t._v(\"\\ndocker run -d -p \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8090\")]),t._v(\":8080 --name mytom9 -v /media/ws/disk3/dockersoftware/tomcat9DataVolume:/usr/local/apache-tomcat-9.0.30/webapps/test -v /media/ws/disk3/dockersoftware/tocat9logs/:/usr/local/apache-tomcat-9.0.30/logs --privileged\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"true mytomcat9\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"exec查看\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# docker ps查看id\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# exec查看运行镜像bash\")]),t._v(\"\\ndocker \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exec\")]),t._v(\" aa241d0d95e5 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ls\")]),t._v(\" -l\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#访问localhost:8090\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"在宿主机容器卷部署应用，同步到tomcat的webapps/test目录下\")])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"cd进入  tomcat9DataVolume目录 mkdir WEB-INF\")]),t._v(\" \"),a(\"li\",[t._v(\"cd WEB-INF/\")]),t._v(\" \"),a(\"li\",[t._v(\"touch web.xml\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-xml extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"web-app\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"xmlns\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"http://java.sun.com/xml/ns/j2ee\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"xmlns:\")]),t._v(\"xsi\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"http://www.w3.org/2001/XMLSchema-instance\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"xsi:\")]),t._v(\"schemaLocation\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"version\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"2.4\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"display-name\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"test\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"display-name\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"web-app\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"cd .. 之后touch 个a.jsp\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-jsp extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\\n  pageEncoding=\"UTF-8\"%>\\n<!DOCTYPE html>\\n<html>\\n<head>\\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\\n        <title>mytomcat9 index</title>\\n    </head>\\n    <body>\\n        <%=\"i am docker tomcat self\"%>\\n        <br>\\n        <br>\\n        <% System.out.println(\"===============docker start!\");%>\\n    </body>\\n</html>\\n')])])]),a(\"ul\",[a(\"li\",[t._v(\"创建完成保存退出，查看运行的tomcat9容器中是否生成文件\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[t._v(\"docker \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"exec\")]),t._v(\" aa241d0d95e5 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"ls\")]),t._v(\" -l /usr/local/apache-tomcat-9.0.30/webapps/test\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"访问jsp,\"),a(\"code\",[t._v(\"http://localhost:8090/test/a.jsp\")])]),t._v(\" \"),a(\"li\",[t._v(\"访问宿主机的/tocat9logs下sudo cat catalina.out 查看jsp中的===============docker start!打印\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"推送镜像到ailiyun\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推送镜像到ailiyun\"}},[t._v(\"#\")]),t._v(\" 推送镜像到ailiyun\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"创建镜像仓库\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建镜像仓库\"}},[t._v(\"#\")]),t._v(\" 创建镜像仓库\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"https://cr.console.aliyun.com/cn-hangzhou/instances/repositories\")]),t._v(\" 创建镜像仓库\")]),t._v(\" \"),a(\"li\",[t._v(\"选择本地仓库\")]),t._v(\" \"),a(\"li\",[t._v(\"点击管理，查看推送命令\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sh extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sudo\")]),t._v(\" docker login --username\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"xxx@126.com registry.cn-hangzhou.aliyuncs.com\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sudo\")]),t._v(\" docker tag \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"ImageId\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" registry.cn-hangzhou.aliyuncs.com/gendali/mytomcat:\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"镜像版本号\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sudo\")]),t._v(\" docker push registry.cn-hangzhou.aliyuncs.com/gendali/mytomcat:\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"镜像版本号\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}