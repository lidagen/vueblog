{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{414:function(t,s,a){\"use strict\";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"executor-线程池\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#executor-线程池\"}},[t._v(\"#\")]),t._v(\" Executor 线程池\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"线程池的主要作用是控制运行的线程数量，\"),a(\"strong\",[t._v(\"处理过程中将任务放入队列\")]),t._v(\"，然后在线程创建后启动这些任务，\"),a(\"strong\",[t._v(\"如果线程数量超出了设置的核心线程数则其它排队等候\")])]),t._v(\" \"),a(\"li\",[t._v(\"它的主要特点是：\"),a(\"strong\",[t._v(\"线程复用；控制最大并发数；管理线程\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"executor-与-executors\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#executor-与-executors\"}},[t._v(\"#\")]),t._v(\" Executor 与 Executors\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Executor 是线程池的接口，主要实现类是ThreadPoolExecutor\")]),t._v(\" \"),a(\"li\",[t._v(\"Executors 是线程池的工具类，负责创建一些具体类型的线程池\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"executors-下的三个线程池\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#executors-下的三个线程池\"}},[t._v(\"#\")]),t._v(\" Executors 下的三个线程池\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Executors.newFixedThreadPool(int nThreads)\\n\"),a(\"ul\",[a(\"li\",[t._v(\"核心和最大线程数都等于设定的值LinkedBlockingQueue\")])])]),t._v(\" \"),a(\"li\",[t._v(\"Executors.newSingleThreadExecutor()\\n\"),a(\"ul\",[a(\"li\",[t._v(\"单线程的线程池，核心最大都是1，队列LinkedBlockingQueue\")])])]),t._v(\" \"),a(\"li\",[t._v(\"Executors.newCachedThreadPool()\\n\"),a(\"ul\",[a(\"li\",[t._v(\"核心数为0，最大线程Integer.MAX_VALUE,队列是 SynchronousQueue\")])])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"p\",[t._v(\"Executors 创建线程池方法一般不用，理由如下\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"newFixedThreadPool 、newSingleThreadExecutor队列是LinkedBlockingQueue，队列接近无界，容易引起OOM\")]),t._v(\" \"),a(\"li\",[t._v(\"newCachedThreadPool、ScheduledThreadPool创建最大线程Integer.MAX_VALUE，可能会创建大量线程导致OOM\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"threadpoolexecutor-七大参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#threadpoolexecutor-七大参数\"}},[t._v(\"#\")]),t._v(\" ThreadPoolExecutor 七大参数\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" corePoolSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" maximumPoolSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" keepAliveTime\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),t._v(\" unit\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"BlockingQueue\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" workQueue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" threadFactory\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                              \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RejectedExecutionHandler\")]),t._v(\" handler\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"corePoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            maximumPoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            maximumPoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" corePoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            keepAliveTime \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IllegalArgumentException\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"workQueue \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" threadFactory \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" handler \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"NullPointerException\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"acc \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getSecurityManager\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"\\n                \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AccessController\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getContext\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"corePoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" corePoolSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"maximumPoolSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" maximumPoolSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"workQueue \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" workQueue\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"keepAliveTime \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" unit\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toNanos\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keepAliveTime\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"threadFactory \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" threadFactory\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"handler \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" handler\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"核心线程数 corePoolSize\")]),t._v(\" \"),a(\"li\",[t._v(\"最大线程数 maximumPoolSize\\n\"),a(\"ul\",[a(\"li\",[t._v(\"值必须>=1 且 maximumPoolSize = corePoolSize + 扩展的\")])])]),t._v(\" \"),a(\"li\",[t._v(\"存活时间 keepAliveTime\\n\"),a(\"ul\",[a(\"li\",[t._v(\"当前线程数量超过corePoolSize，且空闲时间达到keepAliveTime，会销毁直到剩下corePoolSize个为止\")])])]),t._v(\" \"),a(\"li\",[t._v(\"时间单位 unit\")]),t._v(\" \"),a(\"li\",[t._v(\"阻塞队列 workQueue\")]),t._v(\" \"),a(\"li\",[t._v(\"线程工厂 threadFactory\\n\"),a(\"ul\",[a(\"li\",[t._v(\"一般默认即可\")])])]),t._v(\" \"),a(\"li\",[t._v(\"拒绝策略 handler\\n\"),a(\"ul\",[a(\"li\",[t._v(\"当队列满了且最大线程数也扩展了，进来的线程如何处理的策略\")])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"线程池工作原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池工作原理\"}},[t._v(\"#\")]),t._v(\" 线程池工作原理\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"线程进来，进入核心线程数执行，如果核心线程数满了以后，放入阻塞队列中等待，阻塞队列满了以后，扩展最大线程数。\")]),t._v(\" \"),a(\"li\",[t._v(\"如果最大线程数扩展满了以后，阻塞队列也满了，这时候要执行拒绝策略\")]),t._v(\" \"),a(\"li\",[t._v(\"如果线程数降下来了，超过keepAliveTime的闲置线程会被回收，直到线程数回到核心线程数\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"四种拒绝策略\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四种拒绝策略\"}},[t._v(\"#\")]),t._v(\" 四种拒绝策略\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"AbortPolicy(默认): 直接抛出RejectedExecutionException异常阻止系统正常运行\")]),t._v(\" \"),a(\"li\",[t._v('CallerRunsPolicy:\"调用者运行\"一种调节机制，该策略不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新的任务流量\\n'),a(\"ul\",[a(\"li\",[t._v(\"简单理解就是，如果是main线程开启线程池，则做不完的线程回退给main线程让其执行\")])])]),t._v(\" \"),a(\"li\",[t._v(\"DiscardOldestPolicy:抛弃队列中等待最久的任务，把当前任务加入队列中常识再次提交当前任务\")]),t._v(\" \"),a(\"li\",[t._v(\"DiscardPolicy:直接丢弃任务，不予任何处理也不提示异常。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"线程数如何合理设定\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程数如何合理设定\"}},[t._v(\"#\")]),t._v(\" 线程数如何合理设定\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"CPU 密集型\\n\"),a(\"ul\",[a(\"li\",[t._v(\"CPU密集型的任务需要大量运算，而没有阻塞，CPU一直全速运行。\")]),t._v(\" \"),a(\"li\",[t._v(\"CPU密集型一般任务配置尽可能少的线程数，线程数 = CPU核数+1\")])])]),t._v(\" \"),a(\"li\",[t._v(\"IO  密集型\\n\"),a(\"ul\",[a(\"li\",[t._v(\"IO密集型的任务并不一定一直在执行任务，应配置尽可能的多\\n\"),a(\"ul\",[a(\"li\",[a(\"ol\",[a(\"li\",[t._v(\"线程数 = CPU核数 * 2\")])])]),t._v(\" \"),a(\"li\",[a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[t._v(\"线程数 = CPU核数/1-阻塞系数 （阻塞系数0.8~0.9之间）\")])])])])])])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"p\",[t._v(\"Runtime.getRuntime().availableProcessors() //查看核数\")])])])}),[],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}