{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{461:function(t,e,a){\"use strict\";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"mysql-mvcc机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql-mvcc机制\"}},[t._v(\"#\")]),t._v(\" MySQL MVCC机制\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"概述\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概述\"}},[t._v(\"#\")]),t._v(\" 概述\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"MVCC是一种多版本并发控制机制，只作用在\"),a(\"code\",[t._v(\"Read Committed\")]),t._v(\"、\"),a(\"code\",[t._v(\"Repeatable Read\")]),t._v(\"隔离级别上。\"),a(\"code\",[t._v(\"READ UNCOMMITED\")]),t._v(\"不是MVCC兼容的，因为查询不能找到适合他们事务版本的行版本(读未提交)；\"),a(\"code\",[t._v(\"SERIABLABLE\")]),t._v(\"也不与MVCC兼容，因为读操作会锁定他们返回的每一行数据。\")]),t._v(\" \"),a(\"li\",[t._v(\"MYSQL事务型存储引擎,如,InnoDB，Falcon以及PBXT都不使用一种简单的行锁机制.事实上,他们都和MVCC–多版本并发控制来一起使用.\")]),t._v(\" \"),a(\"li\",[t._v(\"锁机制可以控制并发操作,但是其系统开销较大,而MVCC可以在大多数情况下代替行级锁,使用MVCC,能降低其系统开销.\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"mvcc具体实现\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mvcc具体实现\"}},[t._v(\"#\")]),t._v(\" MVCC具体实现\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"InnoDB的MVCC，是通过在每行数据后面保存两个隐藏列来实现的，这两个列分别保存的是这行数据创建时间和删除时间。这个时间不是真正的时间，可以理解为系统版本号或者\"),a(\"strong\",[t._v(\"事务的ID\")]),t._v(\",每开启一个新的事务，系统版本号就会自动递增。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"rr-隔离级别下的mvcc例子\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rr-隔离级别下的mvcc例子\"}},[t._v(\"#\")]),t._v(\" RR 隔离级别下的MVCC例子\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"创建一张表，开启事务插入两条数据\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*创建一张 t_mvcc表*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"create\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"table\")]),t._v(\" t_mvcc\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n    ID \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"primary\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"key\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"auto_increment\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \\n    NAME \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"varchar\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* 开启事务插入数据*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"start\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"transaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"insert\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"into\")]),t._v(\" t_mvcc \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"values\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'lilei'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"insert\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"into\")]),t._v(\" t_mvcc \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"values\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'hanmeimei'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"在对应的数据 (后面两列是隐藏列,我们通过查询语句并看不到) 。\"),a(\"br\"),t._v(\"\\n开启一个事务，会有一个事务ID。本例中，ID 1、2两条数据拥有同样的创建时间（事务ID） 1。\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ID\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"NAME\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"创建时间(事务ID)\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"删除时间(事务ID)\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"lilei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"2\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"hanmeimei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"select语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#select语句\"}},[t._v(\"#\")]),t._v(\" SELECT语句\")]),t._v(\" \"),a(\"p\",[t._v(\"InnoBD会根据两个条件来查找数据（两个条件是 && 的关系）：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"查找创建时间小于或等于当前事务ID的数据行。（确保查找的数据是之前存在的或者本次事务插入或修改过的）\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"查找时行的删除时间要么未定义，要么大于当前事务ID。（确保事务读取到的行，在事务开始前未被删除）\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"p\",[t._v(\"行的删除时间大于当前事务ID的含义是：\\nA事务开启，查询到数据库存在一条数据，在再次查这条数据的时候，B事务开始了，并且删除了此条数据，这时候这条数据删除时间是B事务的且大于A事务的ID，这时候A事务是可以看的这条数据的。\\n即保证了事务开启后确保了读取的行未被删除。\")])]),t._v(\" \"),a(\"p\",[t._v(\"接着上面的例子，开启第二个事务（事务ID =2）\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"start\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"transaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_mvcc\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//(1)\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_mvcc\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//(2)\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"假设 1\")]),a(\"br\"),t._v(\"\\n假设在执行这个事务ID=2的事务时，刚执行到（1）,有一个事务ID=3的事务往表里插入一条数据\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"start\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"transaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*事务 3*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"insert\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"into\")]),t._v(\" t_mvcc \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"values\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'jim'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"这时表里的数据如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ID\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"NAME\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"创建时间(事务ID)\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"删除时间(事务ID)\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"lilei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"2\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"hanmeimei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"jim\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"然后接着执行事务ID=2中的（2）,由于ID=3的数据 \"),a(\"em\",[t._v(\"创建时间(事务ID)为 3\")]),t._v(\",执行事务ID=2中的（2）时，InnoDB只会查找\"),a(\"strong\",[t._v(\"创建时间小于或等于当前事务ID的数据行\")]),t._v(\"，所以后开启的事务ID=3插入的数据事务ID=2中是查不到的。（避免了幻读）\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"delete语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#delete语句\"}},[t._v(\"#\")]),t._v(\" DELETE语句\")]),t._v(\" \"),a(\"p\",[t._v(\"InnoBD会给每条删除的数据增加一个删除时间（当前事务的ID号）\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"假设 2\")]),a(\"br\"),t._v(\"\\n假设在执行事务ID=2的事务时，刚执行到（1），假设执行完了事务ID=3,接着又执行了事务ID=4的事务。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*事务 4*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"start\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"transaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"delete\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_mvcc \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n\")])])]),a(\"p\",[t._v(\"这时数据库里的数据如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ID\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"NAME\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"创建时间(事务ID)\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"删除时间(事务ID)\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"lilei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"4\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"2\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"hanmeimei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"jim\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"然后接着执行事务ID=2中的（2）,根据InnoDB的检索条件**查找时行的删除时间要么未定义，要么大于当前事务ID。**可知，删除时间列4是大于当前事务ID=2的，所以 ID=1 这行还是能保证会被事务查询出来。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"update语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#update语句\"}},[t._v(\"#\")]),t._v(\" UPDATE语句\")]),t._v(\" \"),a(\"p\",[t._v(\"InnoDB执行UPDATE，实际上是新插入了一行记录，并保存其创建时间为当前事务的ID，同时保存当前事务ID到要UPDATE的行的删除时间。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"假设 3\")]),a(\"br\"),t._v(\"\\n假设执行事务ID=2中的（1）时,其它用户执行了事务ID=3和事务ID=4，这时有用户开启了事务ID=5的事务：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*事务 5*/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"start\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"transaction\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"update\")]),t._v(\" t_mvcc \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'long'\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"根据update规则，这时数据库里的数据如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ID\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"NAME\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"创建时间(事务ID)\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"删除时间(事务ID)\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"lilei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"4\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"2\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"hanmeimei\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"5\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"jim\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"3\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"2\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"long\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"5\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"undefined\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"继续执行事务ID=2中的（2）,根据InnoDB的检索条件：根据\"),a(\"strong\",[t._v(\"创建时间小于或等于当前事务ID的数据行\")]),t._v(\"，排除掉后两行。根据\"),a(\"strong\",[t._v(\"查找时行的删除时间要么未定义，要么大于当前事务ID。\")]),t._v(\"，前两行符合。\")]),t._v(\" \"),a(\"p\",[t._v(\"INSERT同理。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[t._v(\"#\")]),t._v(\" 总结\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"通过上述例子可以看出，在RR隔离级别下，通过MVCC机制，在一个事务开启后，后续事务对数据的增删改。都不会影响当前事务查询数据的一致性。\")]),t._v(\" \"),a(\"li\",[t._v(\"这种额外列所带来的结果就是：对于大多数查询来说根本不需要获得一个锁，只需要根据两个条件来检索符合的数据，缺点是每行会存储更多的列，做更多的检查，处理更多的善后操作。\")]),t._v(\" \"),a(\"li\",[t._v(\"MVCC 结合 行锁（S S兼容），从而提高数据库系统的并发性能。\")])])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}